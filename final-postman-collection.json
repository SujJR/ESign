{
  "info": {
    "name": "E-Signature API - Simplified API Key Management",
    "description": "Complete API collection for E-Signature application with simplified API key management, template processing, Adobe Sign integration, and comprehensive workflow management.\n\n🔑 **SIMPLIFIED API KEY AUTHENTICATION:**\n• Admin-only API key management - no organization complexity\n• Generate admin key with `node generate-api-keys.js`\n• Create keys for different people/products using admin key\n• Built-in key rotation, expiration, and permission management\n\n� **API KEY MANAGEMENT FEATURES:**\n• ✅ Create API Key - Generate keys for users/products\n• ✅ List All Keys - View and filter all API keys\n• ✅ Rotate Keys - Generate new key values for security\n• ✅ Update Keys - Modify permissions and properties\n• ✅ Delete Keys - Deactivate unused keys\n• ✅ Key Statistics - Monitor usage and performance\n\n🚀 **UNIFIED DOCUMENT WORKFLOW:**\n• Single endpoint for upload, preparation, and sending\n• Auto-extract recipients from JSON template data\n• Process template variables in DOCX files\n• Real-time Adobe Sign integration\n• Generate and store signing URLs\n\n🔄 **TRANSACTION MANAGEMENT:**\n• Complete transaction tracking system\n• Monitor participant status and progress\n• Send automated reminders\n• Generate analytics and reports\n• Bulk operations support\n\n🔔 **WEBHOOK INTEGRATION:**\n• Real-time status updates from Adobe Sign\n• Automatic signature timestamp recording\n• Support for multiple webhook events\n\n💾 **DATABASE:**\n✅ MongoDB Atlas integration\n✅ Persistent data storage\n✅ Enhanced error handling\n✅ Simplified schema without organization complexity",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000"
    },
    {
      "key": "apiKey",
      "value": "",
      "description": "Admin API Key for authentication - Generate using node generate-api-keys.js"
    },
    {
      "key": "newApiKey",
      "value": "",
      "description": "Newly created API key for testing"
    },
    {
      "key": "testKeyId",
      "value": "",
      "description": "Key ID for testing API key operations"
    },
    {
      "key": "documentId",
      "value": ""
    },
    {
      "key": "signingUrl",
      "value": ""
    },
    {
      "key": "recipientEmail",
      "value": "john.smith@example.com"
    },
    {
      "key": "webhookUrl",
      "value": "https://your-domain.com/api/webhooks/adobe-sign",
      "description": "The URL where Adobe Sign will send webhook events"
    },
    {
      "key": "transactionId",
      "value": "",
      "description": "Transaction ID for testing transaction endpoints"
    },
    {
      "key": "testDocumentId",
      "value": "6847d0db67d1eb1ee26ea190",
      "description": "Sample document ID for transaction testing"
    }
  ],
  "item": [
    {
      "name": "Health Checks",
      "description": "🏥 **HEALTH CHECK ENDPOINTS**\n\nMonitor the health and status of your E-Signature API and its integrations.\n\n📋 **Available Health Checks:**\n• Server Health - Basic server information and uptime\n• Adobe Sign Health - Test Adobe Sign API connectivity and configuration\n\n✅ **Key Features:**\n• Real-time status monitoring\n• Integration health verification\n• API connectivity testing\n• System diagnostics\n\n⚠️ **Important:** These endpoints help ensure your system is running properly and can communicate with Adobe Sign services.",
      "item": [
        {
          "name": "Server Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Server health check successful');",
                  "    console.log('🚀 Status:', response.status);",
                  "    console.log('📊 Environment:', response.environment);",
                  "    console.log('⏱️ Uptime:', response.uptime);",
                  "    console.log('🕐 Timestamp:', response.timestamp);",
                  "    if (response.version) {",
                  "        console.log('🔖 Version:', response.version);",
                  "    }",
                  "} else {",
                  "    console.log('❌ Server health check failed');",
                  "    console.log('🔍 Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{baseUrl}}/",
            "description": "🏥 **Server Health Check**\n\nBasic health check for the E-Signature API server.\n\n✅ **What it checks:**\n• Server is running and responding\n• Basic server information\n• Application uptime\n• Environment details\n\n📋 **Response includes:**\n• Status (healthy/unhealthy)\n• Server uptime\n• Environment (development/production)\n• Current timestamp\n• Version information (if available)\n\n⚠️ **Note:** This endpoint does not require authentication and provides basic server status information."
          }
        },
        {
          "name": "Adobe Sign Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Adobe Sign health check successful');",
                  "    console.log('🔗 Status:', response.status);",
                  "    console.log('🌐 Base URL:', response.baseUrl);",
                  "    console.log('🔑 API Key Status:', response.apiKeyStatus);",
                  "    console.log('📊 Connection Status:', response.connectionStatus);",
                  "    console.log('⏱️ Response Time:', response.responseTime + 'ms');",
                  "    console.log('🕐 Timestamp:', response.timestamp);",
                  "    if (response.userInfo) {",
                  "        console.log('👤 User Info:', response.userInfo);",
                  "    }",
                  "} else {",
                  "    console.log('❌ Adobe Sign health check failed');",
                  "    const response = pm.response.json();",
                  "    console.log('🔍 Error:', response.message);",
                  "    if (response.details) {",
                  "        console.log('📋 Details:', response.details);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/enhanced/adobe-sign/health",
            "description": "🏥 **Adobe Sign Health Check**\n\nComprehensive health check for Adobe Sign API integration.\n\n✅ **What it checks:**\n• Adobe Sign API connectivity\n• API key validity and permissions\n• Base URL configuration\n• Service response time\n• User account information\n\n📋 **Response includes:**\n• Overall health status\n• Adobe Sign base URL\n• API key validation status\n• Connection test results\n• Response time measurements\n• User account details (if accessible)\n\n⚠️ **Authentication Required:** This endpoint requires a valid API key to test Adobe Sign integration.\n\n🔧 **Troubleshooting:**\n• If this fails, check your Adobe Sign API configuration\n• Verify your API key is valid and has proper permissions\n• Ensure Adobe Sign base URL is correct"
          }
        }
      ]
    },
    {
      "name": "API Key Management",
      "description": "🔑 **API KEY AUTHENTICATION**\n\nThis system uses API Key authentication exclusively. All endpoints require an API key.\n\n📋 **How to get an API key:**\n1. Run `node generate-api-keys.js` in your project directory to generate an admin key\n2. Use the admin API key to create additional keys for different people and products\n3. Set the API key in the collection variable `{{apiKey}}`\n\n✅ **Authentication Methods:**\n• Header: `X-API-Key: your_api_key`\n• Authorization Header: `Authorization: Bearer your_api_key`\n• Query Parameter: `?api_key=your_api_key`\n\n⚠️ **Important:** \n• Keep your API keys secure and never commit them to version control\n• Only admin API keys can manage other API keys\n• Rotate keys regularly for security",
      "item": [
        {
          "name": "Create API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.apiKey) {",
                  "        console.log('✅ API Key created successfully');",
                  "        console.log('🔑 API Key:', response.data.apiKey);",
                  "        console.log('📋 Name:', response.data.name);",
                  "        console.log('👤 Assigned To:', response.data.assignedTo);",
                  "        console.log('🔐 Permissions:', response.data.permissions.join(', '));",
                  "        ",
                  "        // Save the API key to collection variable for testing",
                  "        pm.collectionVariables.set('newApiKey', response.data.apiKey);",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to create API key:', pm.response.json().message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "Admin API key required to create new keys"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Document Manager Key\",\n  \"description\": \"API key for document management operations\",\n  \"assignedTo\": \"John Smith - Sales Team\",\n  \"permissions\": [\"documents:read\", \"documents:write\", \"documents:send\"],\n  \"environment\": \"production\",\n  \"expiresIn\": \"365d\",\n  \"rateLimit\": {\n    \"requestsPerMinute\": 100,\n    \"requestsPerHour\": 1000\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/api/auth/api-keys",
            "description": "**Create a new API key** (Admin only)\n\nCreate API keys for different people or products with specific permissions.\n\n✅ **Required Fields:**\n• `name` - Descriptive name for the API key\n\n📋 **Optional Fields:**\n• `description` - Purpose of the API key\n• `assignedTo` - Person or product this key is for\n• `permissions` - Array of permissions\n• `environment` - development, staging, or production\n• `expiresIn` - Expiration time (e.g., \"30d\", \"1y\")\n• `rateLimit` - Request rate limits\n\n⚠️ **Admin Access Required:** Only users with admin API keys can create new keys."
          }
        },
        {
          "name": "List All API Keys",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.apiKeys) {",
                  "        console.log('✅ API Keys retrieved successfully');",
                  "        console.log('📊 Total Keys:', response.data.pagination.totalItems);",
                  "        console.log('📄 Page:', response.data.pagination.currentPage);",
                  "        console.log('');",
                  "        console.log('📋 API Keys:');",
                  "        response.data.apiKeys.forEach((key, index) => {",
                  "            console.log(`${index + 1}. ${key.name}`);",
                  "            console.log(`   👤 Assigned To: ${key.assignedTo || 'Not specified'}`);",
                  "            console.log(`   🔐 Permissions: ${key.permissions.join(', ')}`);",
                  "            console.log(`   📊 Status: ${key.isActive ? 'Active' : 'Inactive'}`);",
                  "            console.log(`   🕐 Last Used: ${key.lastUsed ? new Date(key.lastUsed).toLocaleDateString() : 'Never'}`);",
                  "            console.log('');",
                  "        });",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to retrieve API keys:', pm.response.json().message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "Admin API key required"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/api-keys?page=1&limit=10&active=true",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "api-keys"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page"
                },
                {
                  "key": "active",
                  "value": "true",
                  "description": "Filter by active status"
                },
                {
                  "key": "assignedTo",
                  "value": "",
                  "description": "Filter by assigned person/product",
                  "disabled": true
                },
                {
                  "key": "environment",
                  "value": "",
                  "description": "Filter by environment",
                  "disabled": true
                }
              ]
            },
            "description": "**Retrieve all API keys** (Admin only)\n\nList all API keys with filtering and pagination options.\n\n🔍 **Query Parameters:**\n• `page` - Page number (default: 1)\n• `limit` - Items per page (default: 10)\n• `active` - Filter by active status\n• `assignedTo` - Filter by assigned person/product\n• `environment` - Filter by environment\n• `search` - Search in name, keyId, or assignedTo\n\n⚠️ **Admin Access Required:** Only admin API keys can view all keys."
          }
        },
        {
          "name": "Get API Key Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.apiKey) {",
                  "        const key = response.data.apiKey;",
                  "        console.log('✅ API Key details retrieved successfully');",
                  "        console.log('📋 Name:', key.name);",
                  "        console.log('🆔 Key ID:', key.keyId);",
                  "        console.log('👤 Assigned To:', key.assignedTo || 'Not specified');",
                  "        console.log('📝 Description:', key.description || 'No description');",
                  "        console.log('🔐 Permissions:', key.permissions.join(', '));",
                  "        console.log('🌍 Environment:', key.environment);",
                  "        console.log('📊 Status:', key.isActive ? 'Active' : 'Inactive');",
                  "        console.log('🕐 Created:', new Date(key.createdAt).toLocaleDateString());",
                  "        console.log('📈 Usage Count:', key.usageCount || 0);",
                  "        if (key.lastUsed) {",
                  "            console.log('⏰ Last Used:', new Date(key.lastUsed).toLocaleString());",
                  "        }",
                  "        if (key.expiresAt) {",
                  "            console.log('⚠️ Expires:', new Date(key.expiresAt).toLocaleDateString());",
                  "        }",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to retrieve API key details:', pm.response.json().message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "Admin API key required"
              }
            ],
            "url": "{{baseUrl}}/api/auth/api-keys/{{testKeyId}}",
            "description": "**Get detailed information about a specific API key** (Admin only)\n\n📋 **Returns:**\n• Key metadata and configuration\n• Usage statistics\n• Permission and scope details\n• Rate limit settings\n• Expiration information\n\n⚠️ **Note:** The actual API key value is never returned for security reasons."
          }
        },
        {
          "name": "Rotate API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.apiKey) {",
                  "        console.log('✅ API Key rotated successfully');",
                  "        console.log('🔑 New API Key:', response.data.apiKey);",
                  "        console.log('🆔 Key ID:', response.data.keyId);",
                  "        console.log('📋 Name:', response.data.name);",
                  "        console.log('👤 Assigned To:', response.data.assignedTo);",
                  "        console.log('🔄 Rotated At:', new Date(response.data.rotatedAt).toLocaleString());",
                  "        console.log('');",
                  "        console.log('⚠️ IMPORTANT:');",
                  "        console.log('• The old API key is now invalid');",
                  "        console.log('• Update all applications using this key');",
                  "        console.log('• This is the only time the new key will be shown');",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to rotate API key:', pm.response.json().message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "Admin API key required"
              }
            ],
            "url": "{{baseUrl}}/api/auth/api-keys/{{testKeyId}}/rotate",
            "description": "**Rotate an API key** (Admin only)\n\nGenerate a new API key value while preserving all other key properties.\n\n✅ **Use Cases:**\n• Key may have been compromised\n• Regular security rotation\n• Key is expiring soon\n\n🔄 **What happens:**\n• New API key value is generated\n• All metadata and permissions remain the same\n• Old key becomes invalid immediately\n• Rotation is logged for audit purposes\n\n⚠️ **Important:** Update all applications using the old key immediately."
          }
        },
        {
          "name": "Update API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.apiKey) {",
                  "        console.log('✅ API Key updated successfully');",
                  "        console.log('📋 Name:', response.data.apiKey.name);",
                  "        console.log('� Assigned To:', response.data.apiKey.assignedTo);",
                  "        console.log('🔐 Permissions:', response.data.apiKey.permissions.join(', '));",
                  "        console.log('📊 Status:', response.data.apiKey.isActive ? 'Active' : 'Inactive');",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to update API key:', pm.response.json().message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "Admin API key required"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Document Manager Key\",\n  \"description\": \"Updated API key for enhanced document management\",\n  \"assignedTo\": \"Jane Smith - Marketing Team\",\n  \"permissions\": [\"documents:read\", \"documents:write\", \"documents:send\", \"documents:status\"],\n  \"isActive\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/api/auth/api-keys/{{testKeyId}}",
            "description": "**Update API key properties** (Admin only)\n\n📝 **Updatable Fields:**\n• `name` - Key name\n• `description` - Key description\n• `assignedTo` - Person or product assigned\n• `permissions` - Array of permissions\n• `isActive` - Active/inactive status\n• `allowedIPs` - IP restrictions\n• `rateLimit` - Rate limiting settings\n• `metadata` - Additional metadata\n\n⚠️ **Note:** The actual API key value cannot be changed - use rotate for that."
          }
        },
        {
          "name": "Delete API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ API Key deleted successfully');",
                  "    console.log('🗑️ Key ID:', response.data.keyId);",
                  "    console.log('📋 The API key has been deactivated and is no longer valid');",
                  "    console.log('🔍 The key data is preserved for audit purposes');",
                  "} else {",
                  "    console.log('❌ Failed to delete API key:', pm.response.json().message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "Admin API key required"
              }
            ],
            "url": "{{baseUrl}}/api/auth/api-keys/{{testKeyId}}",
            "description": "**Delete an API key** (Admin only)\n\nDeactivate an API key and make it unusable.\n\n🗑️ **What happens:**\n• API key is marked as inactive\n• Key becomes immediately unusable\n• Key data is preserved for audit trails\n• Deletion is logged with timestamp\n\n⚠️ **Use Cases:**\n• Employee leaves the company\n• Product is discontinued\n• Key is no longer needed\n• Security incident requires key revocation"
          }
        },
        {
          "name": "Get API Key Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.stats) {",
                  "        const stats = response.data.stats;",
                  "        console.log('✅ API Key statistics retrieved successfully');",
                  "        console.log('');",
                  "        console.log('📊 USAGE STATISTICS:');",
                  "        console.log('🆔 Key ID:', stats.keyId);",
                  "        console.log('📋 Name:', stats.name);",
                  "        console.log('👤 Assigned To:', stats.assignedTo || 'Not specified');",
                  "        console.log('📈 Total Usage:', stats.usageCount || 0);",
                  "        console.log('⏰ Last Used:', stats.lastUsed ? new Date(stats.lastUsed).toLocaleString() : 'Never');",
                  "        console.log('🕐 Created:', new Date(stats.createdAt).toLocaleDateString());",
                  "        console.log('📊 Status:', stats.isActive ? 'Active' : 'Inactive');",
                  "        console.log('');",
                  "        console.log('🔐 PERMISSIONS:');",
                  "        stats.permissions.forEach(perm => console.log('• ' + perm));",
                  "        console.log('');",
                  "        console.log('⚡ RATE LIMITS:');",
                  "        console.log('• Per Minute:', stats.rateLimit.requestsPerMinute);",
                  "        console.log('• Per Hour:', stats.rateLimit.requestsPerHour);",
                  "        if (stats.expiresAt) {",
                  "            console.log('');",
                  "            console.log('⚠️ EXPIRATION:');",
                  "            console.log('• Expires:', new Date(stats.expiresAt).toLocaleDateString());",
                  "            if (stats.daysUntilExpiry !== null) {",
                  "                console.log('• Days Until Expiry:', stats.daysUntilExpiry);",
                  "            }",
                  "        }",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to retrieve API key statistics:', pm.response.json().message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "Admin API key required"
              }
            ],
            "url": "{{baseUrl}}/api/auth/api-keys/{{testKeyId}}/stats",
            "description": "**Get detailed statistics for an API key** (Admin only)\n\n📊 **Statistics Include:**\n• Usage count and patterns\n• Last usage timestamp\n• Rate limit configuration\n• Permission analysis\n• Expiration information\n• Activity timeline\n\n💡 **Use Cases:**\n• Monitor API key usage\n• Identify inactive keys\n• Plan for key rotation\n• Audit access patterns\n• Capacity planning"
          }
        }
      ]
    },
    {
      "name": "Document Management",
      "item": [
        {
          "name": "Upload, Prepare, and Send Document (Unified Endpoint)",
          "item": [
            {
              "name": "Method 1: File Upload + JSON File",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.document) {",
                      "        pm.collectionVariables.set('documentId', response.data.document._id);",
                      "        console.log('✅ Method 1: File upload completed successfully');",
                      "        console.log('📄 Document ID:', response.data.document._id);",
                      "        console.log('📊 Adobe Sign Method:', response.data.method);",
                      "        console.log('🔗 Upload Method:', response.data.uploadMethod);",
                      "        console.log('📋 Template Variables Processed:', response.data.templateVariablesProcessed);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "X-API-Key", "value": "{{apiKey}}", "description": "API Key for authentication" }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    { "key": "document", "type": "file", "src": [], "description": "📄 Upload your DOCX, PDF, or DOC file" },
                    { "key": "data", "type": "file", "src": [], "description": "📄 Upload JSON file with template data and recipient info" },
                    { "key": "signingFlow", "value": "SEQUENTIAL", "type": "text", "description": "📋 Optional: SEQUENTIAL or PARALLEL signing flow" }
                  ]
                },
                "url": "{{baseUrl}}/api/documents/upload-and-send",
                "description": "**Method 1: File Upload + JSON Data File**\n\nUpload document files directly from your computer.\n\n📄 **How to use:**\n1. Upload your document file (PDF, DOCX, DOC)\n2. Upload a JSON file containing template data and recipients\n3. Click Send\n\n✅ **Perfect for:** Traditional file upload workflows"
              }
            },
            {
              "name": "Method 2: Document URL + Inline JSON",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.document) {",
                      "        pm.collectionVariables.set('documentId', response.data.document._id);",
                      "        console.log('✅ Method 3: URL + inline JSON completed successfully');",
                      "        console.log('📄 Document ID:', response.data.document._id);",
                      "        console.log('📊 Adobe Sign Method:', response.data.method);",
                      "        console.log('🔗 Upload Method:', response.data.uploadMethod);",
                      "        console.log('📋 Template Variables Processed:', response.data.templateVariablesProcessed);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "X-API-Key", "value": "{{apiKey}}", "description": "API Key for authentication" },
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"documentUrl\": \"https://docs.google.com/document/d/1oC0q7y8_FbJmckQiU73lun4W5k1E4qmz/edit?usp=sharing&ouid=117769269345574843932&rtpof=true&sd=true\",\n  \"jsonData\": {\n    \"agreementDate\": \"June 12, 2025\",\n    \"agreementId\": \"AGR-2025-0612\",\n    \"clientName\": \"Acme Corporation\",\n    \"clientAddress\": \"123 Client Street, Business City, BC 12345\",\n    \"clientEmail\": \"contact@acmecorp.com\",\n    \"clientPhone\": \"(555) 123-4567\",\n    \"clientTitle\": \"Chief Executive Officer\",\n    \"companyName\": \"Professional Services LLC\",\n    \"companyAddress\": \"456 Provider Avenue, Service City, SC 54321\",\n    \"companyEmail\": \"info@proservices.com\",\n    \"companyPhone\": \"(555) 987-6543\",\n    \"providerName\": \"Jane Provider\",\n    \"providerTitle\": \"Managing Director\",\n    \"service1\": \"Strategic consulting for business development\",\n    \"service2\": \"Market analysis and competitive positioning\",\n    \"service3\": \"Implementation support and project management\",\n    \"startDate\": \"June 15, 2025\",\n    \"endDate\": \"December 15, 2025\",\n    \"totalFee\": \"15,000\",\n    \"paymentSchedule\": \"50% upfront, 25% at midpoint, 25% upon completion\",\n    \"paymentDue\": \"15\",\n    \"lateFeePercentage\": \"1.5\",\n    \"terminationNotice\": \"30\",\n    \"witnessName\": \"Sam Witness\",\n    \"recipients\": [\n      {\n        \"name\": \"Acme Corporation\",\n        \"email\": \"{{recipientEmail}}\",\n        \"title\": \"Client\"\n      },\n      {\n        \"name\": \"Jane Provider\",\n        \"email\": \"jane.provider@example.com\",\n        \"title\": \"Service Provider\"\n      },\n      {\n        \"name\": \"Sam Witness\",\n        \"email\": \"sam.witness@example.com\",\n        \"title\": \"Witness\"\n      }\n    ]\n  },\n  \"signingFlow\": \"SEQUENTIAL\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{baseUrl}}/api/documents/upload-and-send",
                "description": "**Method 3: Document URL + Inline JSON**\n\nDownload document from URL and provide JSON data inline.\n\n💾 **How to use:**\n1. Set Content-Type to application/json\n2. Provide documentUrl and jsonData in the request body\n3. Include recipients and template data in jsonData\n4. Click Send\n\n✅ **Perfect for:** API integrations and programmatic usage"
              }
            }
          ],
          "description": "# 🚀 UNIFIED ENDPOINT - All Three Upload Methods\n\nThis single endpoint `/api/documents/upload-and-send` supports **all three upload methods** in one unified interface. All methods perform the same operations:\n\n1. **Upload/Download** the document\n2. **Process** template variables\n3. **Prepare** for signature\n4. **Send** to Adobe Sign\n5. **Store** signing URLs\n\n**Choose the method that best fits your workflow:**\n\n## 📄 **Method 1: File Upload + JSON File**\n- Traditional file upload from computer\n- Perfect for manual workflows\n- Uses multipart/form-data\n\n## 🌐 **Method 2: Document URL + JSON Files**\n- Download document from URL\n- Upload multiple JSON files (auto-combined)\n- Great for distributed data sources\n\n## 💾 **Method 3: Document URL + Inline JSON**\n- Download document from URL\n- Provide JSON data in request body\n- Perfect for API integrations\n\n**All methods produce the same response format and perform the complete workflow in one call!**"
        },
        {
          "name": "Get All Documents",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/documents"
          }
        },
        {
          "name": "Get Document Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/documents/{{documentId}}"
          }
        }
      ]
    },
    {
      "name": "Signature Workflow",
      "item": [
        {
          "name": "Check Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/documents/{{documentId}}/status"
          },
          "response": []
        },
        {
          "name": "Download Document",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/documents/{{documentId}}/download"
          }
        },
        {
          "name": "Send Reminder to Unsigned Recipients",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.pendingRecipients) {",
                  "        console.log('✅ Reminder API call successful - sent to', response.data.pendingRecipients.length, 'pending recipients');",
                  "        response.data.pendingRecipients.forEach(recipient => {",
                  "            console.log('- ' + recipient.email + ' (' + recipient.status + ')');",
                  "        });",
                  "        console.log('');",
                  "        console.log('⚠️  IMPORTANT: Adobe Sign API reminder endpoints may return 404 errors.');",
                  "        console.log('📧 For reliable reminders, use Adobe Sign web interface:');",
                  "        console.log('   1. Go to: https://echosign.adobe.com/');",
                  "        console.log('   2. Click \"Manage\" tab');",
                  "        console.log('   3. Find your document and click \"Send Reminder\"');",
                  "        console.log('   4. Adobe will email all unsigned recipients automatically');",
                  "    }",
                  "} else {",
                  "    console.log('❌ Reminder API call failed:', pm.response.json().message);",
                  "    console.log('');",
                  "    console.log('💡 ALTERNATIVE SOLUTION:');",
                  "    console.log('Use Adobe Sign web interface for 100% reliable reminders:');",
                  "    console.log('https://echosign.adobe.com/ → Manage → Find Document → Send Reminder');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Please complete your signature for this important document. Your prompt attention is appreciated.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/api/documents/{{documentId}}/send-reminder",
            "description": "📧 **Send Reminder to Unsigned Recipients**\n\n✅ **What this endpoint does:**\n• Identifies recipients who haven't signed yet using enhanced detection\n• Attempts to send reminders via Adobe Sign's API\n• Returns success response with pending recipient details\n• Gracefully handles Adobe Sign API failures\n\n⚠️ **IMPORTANT KNOWN ISSUE:**\nAdobe Sign's reminder API endpoints currently return 404 \"Resource not found\" errors. This is an Adobe Sign API issue, not a problem with your system.\n\n🎯 **RECOMMENDED SOLUTION:**\nFor 100% reliable reminders, use Adobe Sign's web interface:\n1. Go to: https://echosign.adobe.com/\n2. Click \"Manage\" tab\n3. Find documents with \"Out for Signature\" status\n4. Click on document → \"Send Reminder\"\n5. Adobe automatically emails all unsigned recipients\n\n💡 **Why web interface works better:**\n• 100% reliable - no API issues\n• Professional emails from Adobe's verified servers\n• No spam problems - high deliverability\n• Direct signing links included automatically\n• Delivery tracking built-in\n\n🔧 **This endpoint still works correctly for:**\n• Identifying unsigned recipients\n• Logging reminder attempts\n• Tracking reminder history\n• System integration workflows"
          }
        }
      ]
    },
    {
      "name": "Transaction Management",
      "description": "🔄 **TRANSACTION MANAGEMENT SYSTEM**\n\nComprehensive transaction tracking, management, and analytics for your e-signature workflows.\n\n🎯 **Key Features:**\n• Create and track signature transactions\n• Monitor participant status and progress\n• Send automated reminders to pending signers\n• Generate analytics and reports\n• Bulk operations for multiple transactions\n• Integration with Adobe Sign agreements\n\n📊 **Transaction Lifecycle:**\n1. **Created** - Transaction initiated\n2. **Sent** - Sent to Adobe Sign\n3. **In Progress** - Participants signing\n4. **Completed** - All signatures collected\n5. **Cancelled** - Transaction cancelled\n6. **Expired** - Transaction expired\n\n⚠️ **Authentication Required:** All transaction endpoints require a valid API key with appropriate permissions.",
      "item": [
        {
          "name": "Create Transaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        pm.collectionVariables.set('transactionId', response.data.transactionId);",
                  "        console.log('✅ Transaction created successfully');",
                  "        console.log('🆔 Transaction ID:', response.data.transactionId);",
                  "        console.log('📄 Document ID:', response.data.documentId);",
                  "        console.log('👥 Participants:', response.data.participants.length);",
                  "        console.log('📊 Status:', response.data.status);",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to create transaction');",
                  "    const response = pm.response.json();",
                  "    console.log('🔍 Error:', response.message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"TXN-{{$randomUUID}}\",\n  \"documentId\": \"{{testDocumentId}}\",\n  \"status\": \"initiated\",\n  \"participants\": [\n    {\n      \"name\": \"John Doe\",\n      \"email\": \"john.doe@example.com\",\n      \"role\": \"signer\",\n      \"status\": \"pending\"\n    },\n    {\n      \"name\": \"Jane Smith\",\n      \"email\": \"jane.smith@example.com\",\n      \"role\": \"signer\",\n      \"status\": \"pending\"\n    }\n  ],\n  \"reminderSettings\": {\n    \"enabled\": true,\n    \"frequency\": \"weekly\",\n    \"maxReminders\": 3\n  },\n  \"deadlines\": {\n    \"signatureDeadline\": \"2025-08-15T23:59:59.000Z\"\n  },\n  \"notes\": \"Important contract requiring signatures from both parties\",\n  \"tags\": [\"contract\", \"urgent\", \"Q3-2025\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/api/transactions",
            "description": "📝 **Create New Transaction**\n\nCreate a new signature transaction to track the signing process.\n\n✅ **Required Fields:**\n• `transactionId` - Unique identifier for the transaction\n• `documentId` - Reference to the document to be signed\n\n📋 **Optional Fields:**\n• `participants` - Array of signers with their details\n• `reminderSettings` - Configuration for automated reminders\n• `deadlines` - Signature and reminder deadlines\n• `notes` - Additional notes about the transaction\n• `tags` - Tags for categorization and filtering\n\n🔧 **Features:**\n• Validates document existence\n• Sets up reminder schedules\n• Tracks participant status\n• Generates transaction timeline"
          }
        },
        {
          "name": "Get All Transactions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('✅ Transactions retrieved successfully');",
                  "        console.log('📊 Total transactions:', response.data.totalDocs);",
                  "        console.log('📄 Current page:', response.data.page);",
                  "        console.log('📋 Transactions on this page:', response.data.docs.length);",
                  "        ",
                  "        if (response.data.docs.length > 0) {",
                  "            console.log('\\n📑 Sample transactions:');",
                  "            response.data.docs.slice(0, 3).forEach((txn, index) => {",
                  "                console.log(`${index + 1}. ${txn.transactionId} - ${txn.status} (${txn.participants.length} participants)`);",
                  "            });",
                  "        }",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to retrieve transactions');",
                  "    const response = pm.response.json();",
                  "    console.log('🔍 Error:', response.message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/transactions?page=1&limit=10&sortBy=createdAt&sortOrder=desc",
              "host": ["{{baseUrl}}"],
              "path": ["api", "transactions"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of transactions per page"
                },
                {
                  "key": "sortBy",
                  "value": "createdAt",
                  "description": "Field to sort by (createdAt, updatedAt, status, transactionId)"
                },
                {
                  "key": "sortOrder",
                  "value": "desc",
                  "description": "Sort order (asc or desc)"
                },
                {
                  "key": "status",
                  "value": "",
                  "description": "Filter by status (initiated, sent, in_progress, completed, cancelled, expired)",
                  "disabled": true
                },
                {
                  "key": "participantEmail",
                  "value": "",
                  "description": "Filter by participant email",
                  "disabled": true
                },
                {
                  "key": "tags",
                  "value": "",
                  "description": "Filter by tags (comma-separated)",
                  "disabled": true
                }
              ]
            },
            "description": "📋 **Get All Transactions**\n\nRetrieve all transactions with optional filtering and pagination.\n\n🔍 **Query Parameters:**\n• `page` - Page number (default: 1)\n• `limit` - Items per page (default: 10)\n• `sortBy` - Sort field (createdAt, updatedAt, status, transactionId)\n• `sortOrder` - Sort direction (asc, desc)\n• `status` - Filter by transaction status\n• `participantEmail` - Filter by participant email\n• `tags` - Filter by tags (comma-separated)\n\n📊 **Response Format:**\n• Paginated results with metadata\n• Total count and page information\n• Populated document and creator details"
          }
        },
        {
          "name": "Get Transaction by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('✅ Transaction details retrieved successfully');",
                  "        console.log('🆔 Transaction ID:', response.data.transactionId);",
                  "        console.log('📊 Status:', response.data.status);",
                  "        console.log('👥 Participants:', response.data.participants.length);",
                  "        console.log('📅 Created:', new Date(response.data.createdAt).toLocaleDateString());",
                  "        console.log('📝 Notes:', response.data.notes);",
                  "        ",
                  "        if (response.data.participants.length > 0) {",
                  "            console.log('\\n👤 Participants:');",
                  "            response.data.participants.forEach((p, index) => {",
                  "                console.log(`${index + 1}. ${p.name} (${p.email}) - ${p.status}`);",
                  "            });",
                  "        }",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to retrieve transaction');",
                  "    const response = pm.response.json();",
                  "    console.log('🔍 Error:', response.message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/transactions/{{transactionId}}",
            "description": "🔍 **Get Transaction Details**\n\nRetrieve detailed information about a specific transaction.\n\n✅ **Response Includes:**\n• Complete transaction details\n• Participant status and information\n• Document information (populated)\n• Timeline and activity history\n• Reminder settings and history\n• Tags and metadata\n\n📋 **Use Cases:**\n• Check transaction status\n• Review participant progress\n• Monitor signing workflow\n• Generate status reports"
          }
        },
        {
          "name": "Update Transaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('✅ Transaction updated successfully');",
                  "        console.log('🆔 Transaction ID:', response.data.transactionId);",
                  "        console.log('📊 New Status:', response.data.status);",
                  "        console.log('📅 Last Updated:', new Date(response.data.updatedAt).toLocaleString());",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to update transaction');",
                  "    const response = pm.response.json();",
                  "    console.log('🔍 Error:', response.message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"in_progress\",\n  \"notes\": \"Updated: Document sent to all participants for signature\",\n  \"participants\": [\n    {\n      \"name\": \"John Doe\",\n      \"email\": \"john.doe@example.com\",\n      \"role\": \"signer\",\n      \"status\": \"signed\",\n      \"signedAt\": \"2025-07-10T10:30:00.000Z\"\n    },\n    {\n      \"name\": \"Jane Smith\",\n      \"email\": \"jane.smith@example.com\",\n      \"role\": \"signer\",\n      \"status\": \"pending\"\n    }\n  ],\n  \"adobeAgreementId\": \"CBJCHBCAABAAqnHRBWWP7YqePS4V6gTl\",\n  \"tags\": [\"contract\", \"urgent\", \"Q3-2025\", \"in-progress\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/api/transactions/{{transactionId}}",
            "description": "✏️ **Update Transaction**\n\nUpdate transaction details, status, and participant information.\n\n📝 **Updatable Fields:**\n• `status` - Transaction status\n• `participants` - Participant details and status\n• `adobeAgreementId` - Adobe Sign agreement ID\n• `notes` - Additional notes\n• `tags` - Transaction tags\n• `reminderSettings` - Reminder configuration\n• `deadlines` - Signature deadlines\n\n🔧 **Use Cases:**\n• Update signing status when participants sign\n• Add Adobe Sign agreement ID after sending\n• Modify deadline dates\n• Update participant information\n• Add progress notes"
          }
        },
        {
          "name": "Delete Transaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success) {",
                  "        console.log('✅ Transaction deleted successfully');",
                  "        console.log('🗑️ Transaction has been marked as inactive');",
                  "        console.log('📋 This is a soft delete - data is preserved for audit purposes');",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to delete transaction');",
                  "    const response = pm.response.json();",
                  "    console.log('🔍 Error:', response.message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/transactions/{{transactionId}}",
            "description": "🗑️ **Delete Transaction**\n\nSoft delete a transaction (marks as inactive).\n\n⚠️ **Important Notes:**\n• This is a soft delete - transaction data is preserved\n• Transaction becomes inactive and won't appear in normal listings\n• Audit trail and history are maintained\n• Use for cancelled or error transactions\n\n🔧 **Security:**\n• Requires appropriate API key permissions\n• Cannot delete transactions with active Adobe Sign agreements\n• Logs all deletion activities"
          }
        },
        {
          "name": "Send Reminder",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('✅ Reminder sent successfully');",
                  "        console.log('📧 Recipients:', response.data.remindersSent);",
                  "        console.log('👥 Pending participants:', response.data.pendingParticipants);",
                  "        console.log('📊 Total reminders sent for this transaction:', response.data.totalRemindersSent);",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to send reminder');",
                  "    const response = pm.response.json();",
                  "    console.log('🔍 Error:', response.message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Please complete your signature for this important document. Your prompt attention is appreciated.\",\n  \"participantEmails\": []\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/api/transactions/{{transactionId}}/reminder",
            "description": "📧 **Send Transaction Reminder**\n\nSend reminder notifications to pending participants.\n\n📝 **Request Body:**\n• `message` - Custom reminder message (optional)\n• `participantEmails` - Specific participants to remind (optional, empty = all pending)\n\n✅ **Features:**\n• Automatically identifies pending participants\n• Respects reminder frequency limits\n• Updates reminder history and counts\n• Integrates with Adobe Sign reminder API\n• Fallback to email notifications\n\n🔧 **Smart Logic:**\n• Only sends to participants with 'pending' status\n• Checks maximum reminder limits\n• Respects frequency settings (daily, weekly, etc.)\n• Logs all reminder activities"
          }
        },
        {
          "name": "Get Transaction Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        const analytics = response.data;",
                  "        console.log('✅ Transaction analytics retrieved successfully');",
                  "        console.log('');",
                  "        console.log('📊 OVERVIEW:');",
                  "        console.log('• Total Transactions:', analytics.overview.totalTransactions);",
                  "        console.log('• Active Transactions:', analytics.overview.activeTransactions);",
                  "        console.log('• Completed:', analytics.overview.completedTransactions);",
                  "        console.log('• Pending:', analytics.overview.pendingTransactions);",
                  "        console.log('');",
                  "        console.log('📈 STATUS BREAKDOWN:');",
                  "        analytics.statusBreakdown.forEach(status => {",
                  "            console.log(`• ${status._id}: ${status.count}`);",
                  "        });",
                  "        console.log('');",
                  "        console.log('⏱️ PERFORMANCE:');",
                  "        console.log('• Avg Completion Time:', analytics.performance.averageCompletionTime, 'hours');",
                  "        console.log('• Completion Rate:', analytics.performance.completionRate + '%');",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to retrieve analytics');",
                  "    const response = pm.response.json();",
                  "    console.log('🔍 Error:', response.message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/transactions/analytics?startDate=2025-01-01&endDate=2025-12-31",
              "host": ["{{baseUrl}}"],
              "path": ["api", "transactions", "analytics"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2025-01-01",
                  "description": "Start date for analytics (YYYY-MM-DD)"
                },
                {
                  "key": "endDate",
                  "value": "2025-12-31",
                  "description": "End date for analytics (YYYY-MM-DD)"
                }
              ]
            },
            "description": "📊 **Transaction Analytics**\n\nGenerate comprehensive analytics and reports for transactions.\n\n📈 **Analytics Include:**\n• Transaction overview and counts\n• Status breakdown and distribution\n• Completion rates and performance metrics\n• Average completion times\n• Participant statistics\n• Reminder effectiveness\n• Time-based trends\n\n🔍 **Query Parameters:**\n• `startDate` - Start date for analysis (YYYY-MM-DD)\n• `endDate` - End date for analysis (YYYY-MM-DD)\n\n💡 **Use Cases:**\n• Performance monitoring\n• Process optimization\n• Reporting and dashboards\n• Business intelligence\n• Trend analysis"
          }
        },
        {
          "name": "Bulk Operations",
          "item": [
            {
              "name": "Bulk Update Status",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    if (response.success && response.data) {",
                      "        console.log('✅ Bulk update completed successfully');",
                      "        console.log('📊 Updated transactions:', response.data.modifiedCount);",
                      "        console.log('🎯 Matched transactions:', response.data.matchedCount);",
                      "        console.log('⚡ Operation completed in:', response.data.executionTime + 'ms');",
                      "    }",
                      "} else {",
                      "    console.log('❌ Bulk update failed');",
                      "    const response = pm.response.json();",
                      "    console.log('🔍 Error:', response.message);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "X-API-Key",
                    "value": "{{apiKey}}",
                    "description": "API Key for authentication"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"filter\": {\n    \"status\": \"initiated\",\n    \"createdAt\": {\n      \"$gte\": \"2025-07-01T00:00:00.000Z\",\n      \"$lte\": \"2025-07-31T23:59:59.999Z\"\n    }\n  },\n  \"updates\": {\n    \"status\": \"sent\",\n    \"notes\": \"Bulk updated: Status changed from initiated to sent\",\n    \"tags\": [\"bulk-updated\", \"july-2025\"]\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{baseUrl}}/api/transactions/bulk/update",
                "description": "⚡ **Bulk Update Transactions**\n\nUpdate multiple transactions in a single operation.\n\n📝 **Request Body:**\n• `filter` - MongoDB filter to select transactions\n• `updates` - Fields to update on matching transactions\n\n🔧 **Common Use Cases:**\n• Update status for multiple transactions\n• Add tags to batches of transactions\n• Bulk modify deadline dates\n• Update reminder settings\n\n⚠️ **Safety Features:**\n• Validates filter criteria\n• Prevents accidental full collection updates\n• Logs all bulk operations\n• Returns detailed operation results"
              }
            },
            {
              "name": "Bulk Send Reminders",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    if (response.success && response.data) {",
                      "        console.log('✅ Bulk reminders sent successfully');",
                      "        console.log('📧 Transactions processed:', response.data.processedTransactions);",
                      "        console.log('📬 Total reminders sent:', response.data.totalRemindersSent);",
                      "        console.log('⏭️ Skipped transactions:', response.data.skippedTransactions);",
                      "        console.log('⚡ Operation completed in:', response.data.executionTime + 'ms');",
                      "        ",
                      "        if (response.data.results && response.data.results.length > 0) {",
                      "            console.log('\\n📋 Transaction Results:');",
                      "            response.data.results.slice(0, 5).forEach((result, index) => {",
                      "                console.log(`${index + 1}. ${result.transactionId}: ${result.remindersSent} reminders sent`);",
                      "            });",
                      "        }",
                      "    }",
                      "} else {",
                      "    console.log('❌ Bulk reminder operation failed');",
                      "    const response = pm.response.json();",
                      "    console.log('🔍 Error:', response.message);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "X-API-Key",
                    "value": "{{apiKey}}",
                    "description": "API Key for authentication"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"filter\": {\n    \"status\": {\n      \"$in\": [\"sent\", \"in_progress\"]\n    },\n    \"isActive\": true\n  },\n  \"message\": \"Friendly reminder: Please complete your document signature at your earliest convenience.\",\n  \"options\": {\n    \"respectFrequency\": true,\n    \"maxRemindersPerTransaction\": 3\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{baseUrl}}/api/transactions/bulk/reminders",
                "description": "📧 **Bulk Send Reminders**\n\nSend reminder notifications to multiple transactions at once.\n\n📝 **Request Body:**\n• `filter` - Select transactions to process\n• `message` - Custom reminder message\n• `options` - Reminder behavior settings\n\n⚙️ **Options:**\n• `respectFrequency` - Honor individual reminder frequency settings\n• `maxRemindersPerTransaction` - Limit reminders per transaction\n\n🎯 **Smart Features:**\n• Only processes transactions with pending participants\n• Respects individual reminder limits and frequency\n• Handles rate limiting and API quotas\n• Provides detailed results for each transaction\n\n💡 **Use Cases:**\n• Weekly reminder campaigns\n• Deadline approaching notifications\n• Follow-up for stalled transactions"
              }
            }
          ],
          "description": "⚡ **BULK OPERATIONS**\n\nPerform operations on multiple transactions simultaneously for efficient workflow management.\n\n🔧 **Available Operations:**\n• Bulk status updates\n• Mass reminder sending\n• Batch tag management\n• Deadline modifications\n\n✅ **Benefits:**\n• Save time with batch processing\n• Consistent updates across transactions\n• Efficient resource utilization\n• Detailed operation results"
        }
      ]
    },
    {
      "name": "Webhooks",
      "description": "🔔 **WEBHOOK INTEGRATION**\n\nWebhooks enable real-time updates when documents are signed, viewed, or declined. Configure Adobe Sign to send events to your application.\n\n📋 **Key Features:**\n• Automatic status updates when documents are signed\n• Real-time tracking of document views and interactions\n• Automatic timestamp recording when signatures are completed\n• Support for signature delegation and declining\n\n✅ **Supported Events:**\n• Document signed\n• Document viewed\n• Document declined\n• Signature delegated to another person\n\n⚠️ **Important:** For webhooks to work, your server must be publicly accessible or use a secure tunnel service like ngrok.",
      "item": [
        {
          "name": "Setup Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"webhookUrl\": \"https://your-domain.com/api/webhooks/adobe-sign\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/api/webhooks/setup",
            "description": "🔧 **Setup Adobe Sign Webhook**: Configure Adobe Sign to send events to your application when documents are signed, viewed, or declined.\n\n✅ **Key Features**:\n• Registers your webhook URL with Adobe Sign\n• Configures event types to be received (signing, viewing, declining)\n• Activates the webhook immediately\n\n📋 **Required Parameters**:\n• `webhookUrl`: The full URL where Adobe Sign should send events (must be publicly accessible)\n\n⚠️ **Important**: Your server must be publicly accessible for webhooks to work. If testing locally, use a service like ngrok to create a secure tunnel."
          },
          "response": []
        },
        {
          "name": "Test Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event\": \"AGREEMENT_ACTION_COMPLETED\",\n  \"agreement\": {\n    \"id\": \"test-agreement-id\",\n    \"name\": \"Test Agreement\",\n    \"status\": \"SIGNED\"\n  },\n  \"participant\": {\n    \"email\": \"{{recipientEmail}}\",\n    \"name\": \"Test User\",\n    \"status\": \"SIGNED\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/api/webhooks/adobe-sign",
            "description": "🧪 **Test Webhook Reception**: Send a simulated Adobe Sign event to test your webhook handling.\n\n✅ **Key Features**:\n• Simulates a document signing event\n• Tests your webhook handler's response\n• No authentication required (Adobe Sign doesn't authenticate)\n\n📋 **Customizable Parameters**:\n• `event`: The type of event (AGREEMENT_ACTION_COMPLETED, AGREEMENT_SIGNED, etc.)\n• `agreement`: Information about the signed document\n• `participant`: Information about the signer\n\n⚠️ **Note**: This endpoint is for testing only. In production, Adobe Sign will call this endpoint automatically when events occur."
          },
          "response": []
        }
      ]
    }
  ]
}
