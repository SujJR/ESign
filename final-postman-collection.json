{
  "info": {
    "name": "E-Signature API - Complete Collection with Enhanced Workflow",
    "description": "Complete API collection for E-Signature application with template processing, Adobe Sign integration, reminder management, iframe-compatible signing URLs, and webhook integration.\n\nüîë AUTHENTICATION: This API uses API Key authentication exclusively. Include your API key in the X-API-Key header for all requests.\n\nüÜï NEW FEATURES:\n‚Ä¢ Send reminders to unsigned recipients\n‚Ä¢ Get signing URLs for iframe embedding\n‚Ä¢ Get signing URLs for all recipients at once\n‚Ä¢ Auto-extract recipients from JSON template data\n‚Ä¢ Map signature fields to specific users\n‚Ä¢ Enhanced workflow management\n‚Ä¢ Real-time status updates via webhooks\n‚Ä¢ Manual signature status synchronization\n\n‚ö†Ô∏è IMPORTANT: Signing URLs change after each signature in multi-recipient workflows. Always fetch fresh URLs before embedding.\n\nüìß REMINDER SYSTEM NOTICE:\nAdobe Sign's API reminder endpoints currently return 404 errors. For reliable reminders, use Adobe Sign's web interface:\n1. Go to: https://echosign.adobe.com/\n2. Click \"Manage\" ‚Üí Find document ‚Üí \"Send Reminder\"\n3. Adobe automatically emails unsigned recipients\n\nThe reminder API endpoint still works for identifying unsigned recipients and system integration.\n\nüîî WEBHOOK INTEGRATION:\nThis API now supports Adobe Sign webhooks for real-time status updates. Set up webhooks to automatically update signature status and timestamps when documents are signed.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000"
    },
    {
      "key": "apiKey",
      "value": "ak_8e5b295f_8e5b295f5cb6d02a1c4b1f741ae7e8aba6451ee363ac7cf563f171513fa3700f",
      "description": "API Key for authentication - get this by running 'node generate-api-keys.js'"
    },
    {
      "key": "documentId",
      "value": ""
    },
    {
      "key": "signingUrl",
      "value": ""
    },
    {
      "key": "recipientEmail",
      "value": "john.smith@example.com"
    },
    {
      "key": "webhookUrl",
      "value": "https://your-domain.com/api/webhooks/adobe-sign",
      "description": "The URL where Adobe Sign will send webhook events"
    }
  ],
  "item": [
    {
      "name": "API Key Management",
      "description": "üîë **API KEY AUTHENTICATION**\n\nThis system uses API Key authentication exclusively. All endpoints require an API key.\n\nüìã **How to get an API key:**\n1. Run `node generate-api-keys.js` in your project directory\n2. Use the generated API key in the `X-API-Key` header\n3. Set the API key in the collection variable `{{apiKey}}`\n\n‚úÖ **Authentication Methods:**\n‚Ä¢ Header: `X-API-Key: your_api_key`\n‚Ä¢ Authorization Header: `Authorization: Bearer your_api_key`\n‚Ä¢ Query Parameter: `?api_key=your_api_key`\n\n‚ö†Ô∏è **Important:** Keep your API keys secure and never commit them to version control.",
      "item": [
        {
          "name": "Create API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.apiKey) {",
                  "        console.log('‚úÖ API Key created successfully');",
                  "        console.log('üîë API Key:', response.data.apiKey.key);",
                  "        console.log('üìã Name:', response.data.apiKey.name);",
                  "        console.log('üîê Permissions:', response.data.apiKey.permissions.join(', '));",
                  "        ",
                  "        // Save the API key to collection variable",
                  "        pm.collectionVariables.set('apiKey', response.data.apiKey.key);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Failed to create API key:', pm.response.json().message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "Admin API key required to create new keys"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"My Application Key\",\n  \"description\": \"API key for document management\",\n  \"permissions\": [\"documents:read\", \"documents:write\", \"documents:send\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/api/auth/api-keys",
            "description": "Create a new API key with specific permissions. Requires admin API key."
          }
        },
        {
          "name": "List API Keys",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "Admin API key required"
              }
            ],
            "url": "{{baseUrl}}/api/auth/api-keys",
            "description": "List all API keys (admin only)"
          }
        },
        {
          "name": "Test API Key Authentication",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ API Key authentication successful');",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.documents) {",
                  "        console.log('üìÑ Documents accessible:', response.data.documents.length);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå API Key authentication failed');",
                  "    console.log('üîç Check if your API key is valid and has the required permissions');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "Your API key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/documents",
            "description": "Test API key authentication by fetching documents"
          }
        }
      ]
    },
    {
      "name": "Document Management",
      "item": [
        {
          "name": "Upload DOCX with Template Data (JSON File)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.document) {",
                  "        pm.collectionVariables.set('documentId', response.data.document._id);",
                  "        console.log('Template processed successfully, ID saved:', response.data.document._id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "Current authentication method - API Key"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Legacy authentication method - JWT token",
                "disabled": true
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "document",
                  "type": "file",
                  "src": [],
                  "description": "Upload your DOCX template file (e.g., Test_Service_Agreement_Template.docx)"
                },
                {
                  "key": "data",
                  "type": "file",
                  "src": [],
                  "description": "Upload JSON file with template data and recipient info (e.g., test-template-data.json)"
                }
              ]
            },
            "url": "{{baseUrl}}/api/documents/upload-with-data"
          }
        },
        {
          "name": "Upload Document from URL with JSON Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.document) {",
                  "        pm.collectionVariables.set('documentId', response.data.document.id);",
                  "        console.log('Document uploaded from URL successfully, ID saved:', response.data.document.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "Current authentication method - API Key"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "documentUrl",
                  "value": "https://example.com/path/to/document.docx",
                  "type": "text",
                  "description": "URL to the document to download"
                },
                {
                  "key": "jsonData",
                  "type": "file",
                  "src": [],
                  "description": "Upload one or more JSON files with template data (will be combined)"
                }
              ]
            },
            "url": "{{baseUrl}}/api/documents/upload-from-url",
            "description": "Upload a document from a URL and process it with JSON data. You can provide multiple JSON files that will be automatically combined.\n\n‚ö†Ô∏è TROUBLESHOOTING:\n- If you see 'socket hang up' errors, it means the connection to the remote server was terminated unexpectedly.\n- Try a different URL, check server accessibility, or use a direct upload instead.\n- Only HTTP and HTTPS URLs are supported.\n- Timeouts are set at 30 seconds for connection and 60 seconds for download.\n- Large files may cause timeouts - consider using direct upload for files over 10MB."
          }
        },
        {
          "name": "Upload Document from URL with inline JSON",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.document) {",
                  "        pm.collectionVariables.set('documentId', response.data.document.id);",
                  "        console.log('Document uploaded from URL with inline JSON successfully, ID saved:', response.data.document.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "Current authentication method - API Key"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"documentUrl\": \"https://www.adobe.com/content/dam/cc/en/pdf/AdobeDocument_SamplePDF.pdf\",\n  \"jsonData\": {\n    \"clientName\": \"ABC Corporation\",\n    \"clientEmail\": \"contact@abccorp.com\",\n    \"signerName\": \"John Smith\",\n    \"signerEmail\": \"{{recipientEmail}}\",\n    \"signerTitle\": \"CEO\",\n    \"projectName\": \"Website Redesign\",\n    \"startDate\": \"June 15, 2025\",\n    \"endDate\": \"December 15, 2025\",\n    \"contractValue\": \"$50,000\",\n    \"recipients\": [\n      {\n        \"name\": \"John Smith\",\n        \"email\": \"{{recipientEmail}}\",\n        \"title\": \"CEO\",\n        \"signatureField\": \"signature_signer\"\n      },\n      {\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane.doe@example.com\",\n        \"title\": \"CFO\",\n        \"signatureField\": \"signature_witness\"\n      }\n    ]\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/api/documents/upload-from-url",
            "description": "Upload a document from a URL and provide JSON template data directly in the request body instead of as files.\n\n‚ö†Ô∏è IMPORTANT NOTES:\n- Use a reliable and accessible URL - check that you can access it in your browser first.\n- Supported formats: PDF, DOCX, DOC (Word docs will be converted to PDF)\n- Some networks block downloads from external URLs - ensure your server has internet access.\n- Add custom timeout handling in your application to handle slow downloads.\n- For production, consider adding a retry mechanism for transient network errors."
          }
        },
        {
          "name": "Get All Documents",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/documents"
          }
        },
        {
          "name": "Get Document Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/documents/{{documentId}}"
          }
        }
      ]
    },
    {
      "name": "Signature Workflow",
      "item": [
        {
          "name": "Prepare Document for Signature",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recipients\": [\n    {\n      \"name\": \"John Smith\",\n      \"email\": \"john.smith@example.com\"\n    }\n  ]\n}"
            },
            "url": "{{baseUrl}}/api/documents/{{documentId}}/prepare"
          }
        },
        {
          "name": "Send for Signature",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/documents/{{documentId}}/send"
          }
        },
        {
          "name": "Check Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/documents/{{documentId}}/status"
          },
          "response": []
        },
        {
          "name": "Update Signature Status",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/documents/{{documentId}}/update-status",
            "description": "üîÑ **Force Update**: Manually check and update the signature status of a document by querying Adobe Sign API.\n\n‚úÖ **Key Features**:\n‚Ä¢ Retrieves the latest status from Adobe Sign\n‚Ä¢ Updates document status (completed, cancelled, expired, etc.)\n‚Ä¢ Updates each recipient's status (signed, pending, declined, etc.)\n‚Ä¢ Updates signedAt timestamps for recipients who have signed\n\n‚è±Ô∏è **When to use**:\n‚Ä¢ As a fallback if webhooks fail\n‚Ä¢ To manually sync status after network issues\n‚Ä¢ When troubleshooting signature workflow problems\n\nüìã **Response includes**:\n‚Ä¢ Updated document status\n‚Ä¢ Updated recipient statuses\n‚Ä¢ Signature timestamps"
          },
          "response": []
        },
        {
          "name": "Download Document",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/documents/{{documentId}}/download"
          }
        },
        {
          "name": "üÜï Send Reminder to Unsigned Recipients",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.pendingRecipients) {",
                  "        console.log('‚úÖ Reminder API call successful - sent to', response.data.pendingRecipients.length, 'pending recipients');",
                  "        response.data.pendingRecipients.forEach(recipient => {",
                  "            console.log('- ' + recipient.email + ' (' + recipient.status + ')');",
                  "        });",
                  "        console.log('');",
                  "        console.log('‚ö†Ô∏è  IMPORTANT: Adobe Sign API reminder endpoints may return 404 errors.');",
                  "        console.log('üìß For reliable reminders, use Adobe Sign web interface:');",
                  "        console.log('   1. Go to: https://echosign.adobe.com/');",
                  "        console.log('   2. Click \"Manage\" tab');",
                  "        console.log('   3. Find your document and click \"Send Reminder\"');",
                  "        console.log('   4. Adobe will email all unsigned recipients automatically');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Reminder API call failed:', pm.response.json().message);",
                  "    console.log('');",
                  "    console.log('üí° ALTERNATIVE SOLUTION:');",
                  "    console.log('Use Adobe Sign web interface for 100% reliable reminders:');",
                  "    console.log('https://echosign.adobe.com/ ‚Üí Manage ‚Üí Find Document ‚Üí Send Reminder');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Please complete your signature for this important document. Your prompt attention is appreciated.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/api/documents/{{documentId}}/send-reminder",
            "description": "üìß **Send Reminder to Unsigned Recipients**\n\n‚úÖ **What this endpoint does:**\n‚Ä¢ Identifies recipients who haven't signed yet using enhanced detection\n‚Ä¢ Attempts to send reminders via Adobe Sign's API\n‚Ä¢ Returns success response with pending recipient details\n‚Ä¢ Gracefully handles Adobe Sign API failures\n\n‚ö†Ô∏è **IMPORTANT KNOWN ISSUE:**\nAdobe Sign's reminder API endpoints currently return 404 \"Resource not found\" errors. This is an Adobe Sign API issue, not a problem with your system.\n\nüéØ **RECOMMENDED SOLUTION:**\nFor 100% reliable reminders, use Adobe Sign's web interface:\n1. Go to: https://echosign.adobe.com/\n2. Click \"Manage\" tab\n3. Find documents with \"Out for Signature\" status\n4. Click on document ‚Üí \"Send Reminder\"\n5. Adobe automatically emails all unsigned recipients\n\nüí° **Why web interface works better:**\n‚Ä¢ 100% reliable - no API issues\n‚Ä¢ Professional emails from Adobe's verified servers\n‚Ä¢ No spam problems - high deliverability\n‚Ä¢ Direct signing links included automatically\n‚Ä¢ Delivery tracking built-in\n\nüîß **This endpoint still works correctly for:**\n‚Ä¢ Identifying unsigned recipients\n‚Ä¢ Logging reminder attempts\n‚Ä¢ Tracking reminder history\n‚Ä¢ System integration workflows"
          }
        },
        {
          "name": "üìß Get Adobe Sign Manual Reminder Instructions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.document) {",
                  "        const doc = response.data.document;",
                  "        console.log('üìã MANUAL REMINDER INSTRUCTIONS');",
                  "        console.log('=' + '='.repeat(40));",
                  "        console.log('');",
                  "        console.log('Document:', doc.originalName);",
                  "        console.log('Status:', doc.status);",
                  "        console.log('Adobe Agreement ID:', doc.adobeAgreementId);",
                  "        console.log('');",
                  "        ",
                  "        if (doc.recipients && doc.recipients.length > 0) {",
                  "            const unsigned = doc.recipients.filter(r => !r.signedAt);",
                  "            console.log('üìß Unsigned Recipients (' + unsigned.length + '):');",
                  "            unsigned.forEach((recipient, i) => {",
                  "                console.log('  ' + (i + 1) + '. ' + recipient.email);",
                  "            });",
                  "            console.log('');",
                  "        }",
                  "        ",
                  "        console.log('üîó SEND REMINDERS VIA ADOBE SIGN:');",
                  "        console.log('1. Go to: https://echosign.adobe.com/');",
                  "        console.log('2. Click \"Manage\" tab');",
                  "        console.log('3. Find this agreement:');",
                  "        console.log('   \"' + doc.originalName + '\"');",
                  "        console.log('   ID: ' + doc.adobeAgreementId);",
                  "        console.log('4. Click \"Send Reminder\"');",
                  "        console.log('5. Adobe will email all unsigned recipients');",
                  "        console.log('');",
                  "        console.log('üåê Direct Link (if available):');",
                  "        console.log('https://echosign.adobe.com/agreements/' + doc.adobeAgreementId);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Failed to get reminder instructions:', pm.response.json().message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/documents/{{documentId}}",
            "description": "üìß **Get Manual Reminder Instructions**\n\nThis endpoint helps you get the information needed to send reminders manually via Adobe Sign's web interface.\n\n‚úÖ **What you'll get:**\n‚Ä¢ Document details (name, status, Adobe Agreement ID)\n‚Ä¢ List of unsigned recipients\n‚Ä¢ Step-by-step instructions for Adobe Sign web interface\n‚Ä¢ Direct Adobe Sign URL (if available)\n\nüéØ **Perfect for:**\n‚Ä¢ Getting Adobe Agreement IDs for manual reminder sending\n‚Ä¢ Identifying which recipients still need to sign\n‚Ä¢ Quick access to Adobe Sign direct links\n\nüí° **Pro tip:** Bookmark the Adobe Sign URL pattern:\n`https://echosign.adobe.com/agreements/{agreementId}`"
          }
        },
        {
          "name": "üÜï Get Signing URL for iframe Embedding",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.signingUrl) {",
                  "        console.log('Signing URL retrieved successfully');",
                  "        console.log('URL preview:', response.data.signingUrl.substring(0, 80) + '...');",
                  "        console.log('Can embed in iframe:', response.data.embedding.canEmbed);",
                  "        console.log('URL changes after signing:', response.data.urlBehavior.changesAfterSigning);",
                  "        console.log('Agreement status:', response.data.agreement.status);",
                  "        console.log('Recipient status:', response.data.recipient.status);",
                  "        ",
                  "        // Save the signing URL to collection variable for further use",
                  "        pm.collectionVariables.set('signingUrl', response.data.signingUrl);",
                  "    }",
                  "} else {",
                  "    console.log('Failed to get signing URL:', pm.response.json().message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/documents/{{documentId}}/signing-url?recipientEmail=john.smith@example.com",
              "host": ["{{baseUrl}}"],
              "path": ["api", "documents", "{{documentId}}", "signing-url"],
              "query": [
                {
                  "key": "recipientEmail",
                  "value": "john.smith@example.com",
                  "description": "Email of the recipient whose signing URL you want to retrieve. Must match one of the document recipients."
                }
              ]
            },
            "description": "Get the signing URL for a specific recipient. This URL can be embedded in an iframe for seamless user experience.\n\n‚ö†Ô∏è Important: URLs may change after each signature in multi-recipient workflows. Always fetch fresh URLs before embedding."
          }
        },
        {
          "name": "üÜï Get All Signing URLs",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.recipients) {",
                  "        console.log('All signing URLs retrieved successfully');",
                  "        console.log('Total recipients:', response.data.totalRecipients);",
                  "        console.log('Active URLs:', response.data.activeUrls);",
                  "        console.log('Agreement status:', response.data.agreement.status);",
                  "        ",
                  "        response.data.recipients.forEach((recipient, index) => {",
                  "            console.log(`${index + 1}. ${recipient.recipient.name} (${recipient.recipient.email})`);",
                  "            console.log(`   Status: ${recipient.status}`);",
                  "            console.log(`   Can Sign: ${recipient.canSign}`);",
                  "            console.log(`   Signature Field: ${recipient.recipient.signatureField}`);",
                  "            if (recipient.signingUrl) {",
                  "                console.log(`   URL Preview: ${recipient.signingUrl.substring(0, 60)}...`);",
                  "            }",
                  "            console.log('');",
                  "        });",
                  "    }",
                  "} else {",
                  "    console.log('Failed to get signing URLs:', pm.response.json().message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/documents/{{documentId}}/signing-urls",
              "host": ["{{baseUrl}}"],
              "path": ["api", "documents", "{{documentId}}", "signing-urls"]
            },
            "description": "Get signing URLs for all recipients of a document. This endpoint returns an array of all recipients with their respective signing URLs, status, and signature field mappings.\n\n‚ö†Ô∏è Important: URLs may change after each signature in multi-recipient workflows. Always fetch fresh URLs before embedding."
          }
        },
        {
          "name": "üÜï Prepare Document with JSON Recipients (Auto-Mapping)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('Document prepared with auto-extracted JSON recipients successfully');",
                  "    if (response.data && response.data.document && response.data.document.recipients) {",
                  "        console.log('Recipients auto-extracted from JSON template data:');",
                  "        response.data.document.recipients.forEach((recipient, index) => {",
                  "            console.log(`${index + 1}. ${recipient.name} (${recipient.email})`);",
                  "            console.log(`   Signature Field: ${recipient.signatureField}`);",
                  "            console.log(`   Title: ${recipient.title || 'N/A'}`);",
                  "        });",
                  "        console.log('');",
                  "        console.log('Auto-generated signature field mapping:');",
                  "        if (response.data.document.signatureFieldMapping) {",
                  "            Object.entries(response.data.document.signatureFieldMapping).forEach(([email, field]) => {",
                  "                console.log(`   ${email} ‚Üí ${field}`);",
                  "            });",
                  "        }",
                  "    }",
                  "} else {",
                  "    console.log('Failed to prepare document:', pm.response.json().message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"useIntelligentPositioning\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/documents/{{documentId}}/prepare",
              "host": ["{{baseUrl}}"],
              "path": ["api", "documents", "{{documentId}}", "prepare"]
            },
            "description": "üöÄ **Enhanced Auto-Extraction**: Automatically extracts recipients from uploaded JSON template data and generates signature field mapping dynamically.\n\n‚ú® **New Dynamic Features**:\n‚Ä¢ Auto-extracts recipients from JSON `recipients` array\n‚Ä¢ Auto-generates signature field mapping from recipient emails and signatureField properties\n‚Ä¢ Only includes people intended for signatures (ignores project managers, approvers, etc.)\n‚Ä¢ No manual mapping required!\n\nüìã **How it works**:\n1. Reads the `recipients` array from your uploaded JSON template data\n2. Extracts only the people meant to sign (not project managers, etc.)\n3. Automatically creates signature field mapping using their emails and signatureField values\n4. Prepares document for signature with intelligent positioning\n\nüéØ **Expected JSON structure**:\n```json\n{\n  \"recipients\": [\n    {\n      \"name\": \"John Smith\",\n      \"email\": \"john.smith@example.com\",\n      \"title\": \"CEO\",\n      \"signatureField\": \"clientSignature\"\n    }\n  ]\n}\n```\n\n‚ö° **No manual work needed** - just upload your JSON with recipients and call this endpoint!"
          }
        }
      ]
    },
    {
      "name": "Webhooks",
      "description": "üîî **WEBHOOK INTEGRATION**\n\nWebhooks enable real-time updates when documents are signed, viewed, or declined. Configure Adobe Sign to send events to your application.\n\nüìã **Key Features:**\n‚Ä¢ Automatic status updates when documents are signed\n‚Ä¢ Real-time tracking of document views and interactions\n‚Ä¢ Automatic timestamp recording when signatures are completed\n‚Ä¢ Support for signature delegation and declining\n\n‚úÖ **Supported Events:**\n‚Ä¢ Document signed\n‚Ä¢ Document viewed\n‚Ä¢ Document declined\n‚Ä¢ Signature delegated to another person\n\n‚ö†Ô∏è **Important:** For webhooks to work, your server must be publicly accessible or use a secure tunnel service like ngrok.",
      "item": [
        {
          "name": "Setup Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"webhookUrl\": \"https://your-domain.com/api/webhooks/adobe-sign\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/api/webhooks/setup",
            "description": "üîß **Setup Adobe Sign Webhook**: Configure Adobe Sign to send events to your application when documents are signed, viewed, or declined.\n\n‚úÖ **Key Features**:\n‚Ä¢ Registers your webhook URL with Adobe Sign\n‚Ä¢ Configures event types to be received (signing, viewing, declining)\n‚Ä¢ Activates the webhook immediately\n\nüìã **Required Parameters**:\n‚Ä¢ `webhookUrl`: The full URL where Adobe Sign should send events (must be publicly accessible)\n\n‚ö†Ô∏è **Important**: Your server must be publicly accessible for webhooks to work. If testing locally, use a service like ngrok to create a secure tunnel."
          },
          "response": []
        },
        {
          "name": "Test Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event\": \"AGREEMENT_ACTION_COMPLETED\",\n  \"agreement\": {\n    \"id\": \"test-agreement-id\",\n    \"name\": \"Test Agreement\",\n    \"status\": \"SIGNED\"\n  },\n  \"participant\": {\n    \"email\": \"{{recipientEmail}}\",\n    \"name\": \"Test User\",\n    \"status\": \"SIGNED\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/api/webhooks/adobe-sign",
            "description": "üß™ **Test Webhook Reception**: Send a simulated Adobe Sign event to test your webhook handling.\n\n‚úÖ **Key Features**:\n‚Ä¢ Simulates a document signing event\n‚Ä¢ Tests your webhook handler's response\n‚Ä¢ No authentication required (Adobe Sign doesn't authenticate)\n\nüìã **Customizable Parameters**:\n‚Ä¢ `event`: The type of event (AGREEMENT_ACTION_COMPLETED, AGREEMENT_SIGNED, etc.)\n‚Ä¢ `agreement`: Information about the signed document\n‚Ä¢ `participant`: Information about the signer\n\n‚ö†Ô∏è **Note**: This endpoint is for testing only. In production, Adobe Sign will call this endpoint automatically when events occur."
          },
          "response": []
        }
      ]
    }
  ]
}
