{
  "info": {
    "name": "E-Signature API - Complete Collection with Enhanced Workflow",
    "description": "Complete API collection for E-Signature application with template processing, Adobe Sign integration, reminder management, iframe-compatible signing URLs, and webhook integration.\n\n🔑 AUTHENTICATION: This API uses API Key authentication exclusively. Include your API key in the X-API-Key header for all requests.\n\n🚀 UNIFIED ENDPOINT: All document upload, preparation, and sending operations are now combined into ONE powerful endpoint:\n• `/api/documents/upload-and-send` - Supports 3 upload methods in one interface\n• Method 1: File Upload + JSON File (multipart/form-data)\n• Method 2: Document URL + Inline JSON (application/json)\n\n🆕 KEY FEATURES:\n• Single endpoint for complete document workflow\n• Auto-extract recipients from JSON template data\n• Process template variables in DOCX files\n• Real-time Adobe Sign integration\n• Generate and store signing URLs\n• Enhanced error handling and logging\n• Rate limit protection\n• Webhook support for status updates\n\n⚠️ IMPORTANT: Signing URLs change after each signature in multi-recipient workflows. Always fetch fresh URLs before embedding.\n\n📧 REMINDER SYSTEM:\nThe API includes reminder functionality for unsigned recipients. Adobe Sign's native reminder API may have limitations, but the system provides both Adobe Sign API reminders and email reminders for reliability.\n\n🔔 WEBHOOK INTEGRATION:\nSupports Adobe Sign webhooks for real-time status updates. Webhooks automatically update signature status and timestamps when documents are signed.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000"
    },
    {
      "key": "apiKey",
      "value": "ak_8e5b295f_8e5b295f5cb6d02a1c4b1f741ae7e8aba6451ee363ac7cf563f171513fa3700f",
      "description": "API Key for authentication - get this by running 'node generate-api-keys.js'"
    },
    {
      "key": "documentId",
      "value": ""
    },
    {
      "key": "signingUrl",
      "value": ""
    },
    {
      "key": "recipientEmail",
      "value": "john.smith@example.com"
    },
    {
      "key": "webhookUrl",
      "value": "https://your-domain.com/api/webhooks/adobe-sign",
      "description": "The URL where Adobe Sign will send webhook events"
    }
  ],
  "item": [
    {
      "name": "Health Checks",
      "description": "🏥 **HEALTH CHECK ENDPOINTS**\n\nMonitor the health and status of your E-Signature API and its integrations.\n\n📋 **Available Health Checks:**\n• Server Health - Basic server information and uptime\n• Adobe Sign Health - Test Adobe Sign API connectivity and configuration\n\n✅ **Key Features:**\n• Real-time status monitoring\n• Integration health verification\n• API connectivity testing\n• System diagnostics\n\n⚠️ **Important:** These endpoints help ensure your system is running properly and can communicate with Adobe Sign services.",
      "item": [
        {
          "name": "Server Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Server health check successful');",
                  "    console.log('🚀 Status:', response.status);",
                  "    console.log('📊 Environment:', response.environment);",
                  "    console.log('⏱️ Uptime:', response.uptime);",
                  "    console.log('🕐 Timestamp:', response.timestamp);",
                  "    if (response.version) {",
                  "        console.log('🔖 Version:', response.version);",
                  "    }",
                  "} else {",
                  "    console.log('❌ Server health check failed');",
                  "    console.log('🔍 Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{baseUrl}}/",
            "description": "🏥 **Server Health Check**\n\nBasic health check for the E-Signature API server.\n\n✅ **What it checks:**\n• Server is running and responding\n• Basic server information\n• Application uptime\n• Environment details\n\n📋 **Response includes:**\n• Status (healthy/unhealthy)\n• Server uptime\n• Environment (development/production)\n• Current timestamp\n• Version information (if available)\n\n⚠️ **Note:** This endpoint does not require authentication and provides basic server status information."
          }
        },
        {
          "name": "Adobe Sign Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Adobe Sign health check successful');",
                  "    console.log('🔗 Status:', response.status);",
                  "    console.log('🌐 Base URL:', response.baseUrl);",
                  "    console.log('🔑 API Key Status:', response.apiKeyStatus);",
                  "    console.log('📊 Connection Status:', response.connectionStatus);",
                  "    console.log('⏱️ Response Time:', response.responseTime + 'ms');",
                  "    console.log('🕐 Timestamp:', response.timestamp);",
                  "    if (response.userInfo) {",
                  "        console.log('👤 User Info:', response.userInfo);",
                  "    }",
                  "} else {",
                  "    console.log('❌ Adobe Sign health check failed');",
                  "    const response = pm.response.json();",
                  "    console.log('🔍 Error:', response.message);",
                  "    if (response.details) {",
                  "        console.log('📋 Details:', response.details);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/enhanced/adobe-sign/health",
            "description": "🏥 **Adobe Sign Health Check**\n\nComprehensive health check for Adobe Sign API integration.\n\n✅ **What it checks:**\n• Adobe Sign API connectivity\n• API key validity and permissions\n• Base URL configuration\n• Service response time\n• User account information\n\n📋 **Response includes:**\n• Overall health status\n• Adobe Sign base URL\n• API key validation status\n• Connection test results\n• Response time measurements\n• User account details (if accessible)\n\n⚠️ **Authentication Required:** This endpoint requires a valid API key to test Adobe Sign integration.\n\n🔧 **Troubleshooting:**\n• If this fails, check your Adobe Sign API configuration\n• Verify your API key is valid and has proper permissions\n• Ensure Adobe Sign base URL is correct"
          }
        }
      ]
    },
    {
      "name": "API Key Management",
      "description": "🔑 **API KEY AUTHENTICATION**\n\nThis system uses API Key authentication exclusively. All endpoints require an API key.\n\n📋 **How to get an API key:**\n1. Run `node generate-api-keys.js` in your project directory\n2. Use the generated API key in the `X-API-Key` header\n3. Set the API key in the collection variable `{{apiKey}}`\n\n✅ **Authentication Methods:**\n• Header: `X-API-Key: your_api_key`\n• Authorization Header: `Authorization: Bearer your_api_key`\n• Query Parameter: `?api_key=your_api_key`\n\n⚠️ **Important:** Keep your API keys secure and never commit them to version control.",
      "item": [
        {
          "name": "Create API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.apiKey) {",
                  "        console.log('✅ API Key created successfully');",
                  "        console.log('🔑 API Key:', response.data.apiKey.key);",
                  "        console.log('📋 Name:', response.data.apiKey.name);",
                  "        console.log('🔐 Permissions:', response.data.apiKey.permissions.join(', '));",
                  "        ",
                  "        // Save the API key to collection variable",
                  "        pm.collectionVariables.set('apiKey', response.data.apiKey.key);",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to create API key:', pm.response.json().message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "Admin API key required to create new keys"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"My Application Key\",\n  \"description\": \"API key for document management\",\n  \"permissions\": [\"documents:read\", \"documents:write\", \"documents:send\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/api/auth/api-keys",
            "description": "Create a new API key with specific permissions. Requires admin API key."
          }
        },
        {
          "name": "List API Keys",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "Admin API key required"
              }
            ],
            "url": "{{baseUrl}}/api/auth/api-keys",
            "description": "List all API keys (admin only)"
          }
        },
        {
          "name": "Test API Key Authentication",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ API Key authentication successful');",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.documents) {",
                  "        console.log('📄 Documents accessible:', response.data.documents.length);",
                  "    }",
                  "} else {",
                  "    console.log('❌ API Key authentication failed');",
                  "    console.log('🔍 Check if your API key is valid and has the required permissions');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "Your API key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/documents",
            "description": "Test API key authentication by fetching documents"
          }
        }
      ]
    },
    {
      "name": "Document Management",
      "item": [
        {
          "name": "Upload, Prepare, and Send Document (Unified Endpoint)",
          "item": [
            {
              "name": "Method 1: File Upload + JSON File",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.document) {",
                      "        pm.collectionVariables.set('documentId', response.data.document._id);",
                      "        console.log('✅ Method 1: File upload completed successfully');",
                      "        console.log('📄 Document ID:', response.data.document._id);",
                      "        console.log('📊 Adobe Sign Method:', response.data.method);",
                      "        console.log('🔗 Upload Method:', response.data.uploadMethod);",
                      "        console.log('📋 Template Variables Processed:', response.data.templateVariablesProcessed);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "X-API-Key", "value": "{{apiKey}}", "description": "API Key for authentication" }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    { "key": "document", "type": "file", "src": [], "description": "📄 Upload your DOCX, PDF, or DOC file" },
                    { "key": "data", "type": "file", "src": [], "description": "📄 Upload JSON file with template data and recipient info" },
                    { "key": "signingFlow", "value": "SEQUENTIAL", "type": "text", "description": "📋 Optional: SEQUENTIAL or PARALLEL signing flow" }
                  ]
                },
                "url": "{{baseUrl}}/api/documents/upload-and-send",
                "description": "**Method 1: File Upload + JSON Data File**\n\nUpload document files directly from your computer.\n\n📄 **How to use:**\n1. Upload your document file (PDF, DOCX, DOC)\n2. Upload a JSON file containing template data and recipients\n3. Click Send\n\n✅ **Perfect for:** Traditional file upload workflows"
              }
            },
            {
              "name": "Method 2: Document URL + Inline JSON",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.document) {",
                      "        pm.collectionVariables.set('documentId', response.data.document._id);",
                      "        console.log('✅ Method 3: URL + inline JSON completed successfully');",
                      "        console.log('📄 Document ID:', response.data.document._id);",
                      "        console.log('📊 Adobe Sign Method:', response.data.method);",
                      "        console.log('🔗 Upload Method:', response.data.uploadMethod);",
                      "        console.log('📋 Template Variables Processed:', response.data.templateVariablesProcessed);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "X-API-Key", "value": "{{apiKey}}", "description": "API Key for authentication" },
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"documentUrl\": \"https://docs.google.com/document/d/1oC0q7y8_FbJmckQiU73lun4W5k1E4qmz/edit?usp=sharing&ouid=117769269345574843932&rtpof=true&sd=true\",\n  \"jsonData\": {\n    \"agreementDate\": \"June 12, 2025\",\n    \"agreementId\": \"AGR-2025-0612\",\n    \"clientName\": \"Acme Corporation\",\n    \"clientAddress\": \"123 Client Street, Business City, BC 12345\",\n    \"clientEmail\": \"contact@acmecorp.com\",\n    \"clientPhone\": \"(555) 123-4567\",\n    \"clientTitle\": \"Chief Executive Officer\",\n    \"companyName\": \"Professional Services LLC\",\n    \"companyAddress\": \"456 Provider Avenue, Service City, SC 54321\",\n    \"companyEmail\": \"info@proservices.com\",\n    \"companyPhone\": \"(555) 987-6543\",\n    \"providerName\": \"Jane Provider\",\n    \"providerTitle\": \"Managing Director\",\n    \"service1\": \"Strategic consulting for business development\",\n    \"service2\": \"Market analysis and competitive positioning\",\n    \"service3\": \"Implementation support and project management\",\n    \"startDate\": \"June 15, 2025\",\n    \"endDate\": \"December 15, 2025\",\n    \"totalFee\": \"15,000\",\n    \"paymentSchedule\": \"50% upfront, 25% at midpoint, 25% upon completion\",\n    \"paymentDue\": \"15\",\n    \"lateFeePercentage\": \"1.5\",\n    \"terminationNotice\": \"30\",\n    \"witnessName\": \"Sam Witness\",\n    \"recipients\": [\n      {\n        \"name\": \"Acme Corporation\",\n        \"email\": \"{{recipientEmail}}\",\n        \"title\": \"Client\"\n      },\n      {\n        \"name\": \"Jane Provider\",\n        \"email\": \"jane.provider@example.com\",\n        \"title\": \"Service Provider\"\n      },\n      {\n        \"name\": \"Sam Witness\",\n        \"email\": \"sam.witness@example.com\",\n        \"title\": \"Witness\"\n      }\n    ]\n  },\n  \"signingFlow\": \"SEQUENTIAL\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{baseUrl}}/api/documents/upload-and-send",
                "description": "**Method 3: Document URL + Inline JSON**\n\nDownload document from URL and provide JSON data inline.\n\n💾 **How to use:**\n1. Set Content-Type to application/json\n2. Provide documentUrl and jsonData in the request body\n3. Include recipients and template data in jsonData\n4. Click Send\n\n✅ **Perfect for:** API integrations and programmatic usage"
              }
            }
          ],
          "description": "# 🚀 UNIFIED ENDPOINT - All Three Upload Methods\n\nThis single endpoint `/api/documents/upload-and-send` supports **all three upload methods** in one unified interface. All methods perform the same operations:\n\n1. **Upload/Download** the document\n2. **Process** template variables\n3. **Prepare** for signature\n4. **Send** to Adobe Sign\n5. **Store** signing URLs\n\n**Choose the method that best fits your workflow:**\n\n## 📄 **Method 1: File Upload + JSON File**\n- Traditional file upload from computer\n- Perfect for manual workflows\n- Uses multipart/form-data\n\n## 🌐 **Method 2: Document URL + JSON Files**\n- Download document from URL\n- Upload multiple JSON files (auto-combined)\n- Great for distributed data sources\n\n## 💾 **Method 3: Document URL + Inline JSON**\n- Download document from URL\n- Provide JSON data in request body\n- Perfect for API integrations\n\n**All methods produce the same response format and perform the complete workflow in one call!**"
        },
        {
          "name": "Get All Documents",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/documents"
          }
        },
        {
          "name": "Get Document Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/documents/{{documentId}}"
          }
        }
      ]
    },
    {
      "name": "Signature Workflow",
      "item": [
        {
          "name": "Check Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/documents/{{documentId}}/status"
          },
          "response": []
        },
        {
          "name": "Download Document",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              }
            ],
            "url": "{{baseUrl}}/api/documents/{{documentId}}/download"
          }
        },
        {
          "name": "Send Reminder to Unsigned Recipients",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.pendingRecipients) {",
                  "        console.log('✅ Reminder API call successful - sent to', response.data.pendingRecipients.length, 'pending recipients');",
                  "        response.data.pendingRecipients.forEach(recipient => {",
                  "            console.log('- ' + recipient.email + ' (' + recipient.status + ')');",
                  "        });",
                  "        console.log('');",
                  "        console.log('⚠️  IMPORTANT: Adobe Sign API reminder endpoints may return 404 errors.');",
                  "        console.log('📧 For reliable reminders, use Adobe Sign web interface:');",
                  "        console.log('   1. Go to: https://echosign.adobe.com/');",
                  "        console.log('   2. Click \"Manage\" tab');",
                  "        console.log('   3. Find your document and click \"Send Reminder\"');",
                  "        console.log('   4. Adobe will email all unsigned recipients automatically');",
                  "    }",
                  "} else {",
                  "    console.log('❌ Reminder API call failed:', pm.response.json().message);",
                  "    console.log('');",
                  "    console.log('💡 ALTERNATIVE SOLUTION:');",
                  "    console.log('Use Adobe Sign web interface for 100% reliable reminders:');",
                  "    console.log('https://echosign.adobe.com/ → Manage → Find Document → Send Reminder');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Please complete your signature for this important document. Your prompt attention is appreciated.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/api/documents/{{documentId}}/send-reminder",
            "description": "📧 **Send Reminder to Unsigned Recipients**\n\n✅ **What this endpoint does:**\n• Identifies recipients who haven't signed yet using enhanced detection\n• Attempts to send reminders via Adobe Sign's API\n• Returns success response with pending recipient details\n• Gracefully handles Adobe Sign API failures\n\n⚠️ **IMPORTANT KNOWN ISSUE:**\nAdobe Sign's reminder API endpoints currently return 404 \"Resource not found\" errors. This is an Adobe Sign API issue, not a problem with your system.\n\n🎯 **RECOMMENDED SOLUTION:**\nFor 100% reliable reminders, use Adobe Sign's web interface:\n1. Go to: https://echosign.adobe.com/\n2. Click \"Manage\" tab\n3. Find documents with \"Out for Signature\" status\n4. Click on document → \"Send Reminder\"\n5. Adobe automatically emails all unsigned recipients\n\n💡 **Why web interface works better:**\n• 100% reliable - no API issues\n• Professional emails from Adobe's verified servers\n• No spam problems - high deliverability\n• Direct signing links included automatically\n• Delivery tracking built-in\n\n🔧 **This endpoint still works correctly for:**\n• Identifying unsigned recipients\n• Logging reminder attempts\n• Tracking reminder history\n• System integration workflows"
          }
        }
      ]
    },
    {
      "name": "Webhooks",
      "description": "🔔 **WEBHOOK INTEGRATION**\n\nWebhooks enable real-time updates when documents are signed, viewed, or declined. Configure Adobe Sign to send events to your application.\n\n📋 **Key Features:**\n• Automatic status updates when documents are signed\n• Real-time tracking of document views and interactions\n• Automatic timestamp recording when signatures are completed\n• Support for signature delegation and declining\n\n✅ **Supported Events:**\n• Document signed\n• Document viewed\n• Document declined\n• Signature delegated to another person\n\n⚠️ **Important:** For webhooks to work, your server must be publicly accessible or use a secure tunnel service like ngrok.",
      "item": [
        {
          "name": "Setup Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{apiKey}}",
                "description": "API Key for authentication"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"webhookUrl\": \"https://your-domain.com/api/webhooks/adobe-sign\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/api/webhooks/setup",
            "description": "🔧 **Setup Adobe Sign Webhook**: Configure Adobe Sign to send events to your application when documents are signed, viewed, or declined.\n\n✅ **Key Features**:\n• Registers your webhook URL with Adobe Sign\n• Configures event types to be received (signing, viewing, declining)\n• Activates the webhook immediately\n\n📋 **Required Parameters**:\n• `webhookUrl`: The full URL where Adobe Sign should send events (must be publicly accessible)\n\n⚠️ **Important**: Your server must be publicly accessible for webhooks to work. If testing locally, use a service like ngrok to create a secure tunnel."
          },
          "response": []
        },
        {
          "name": "Test Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event\": \"AGREEMENT_ACTION_COMPLETED\",\n  \"agreement\": {\n    \"id\": \"test-agreement-id\",\n    \"name\": \"Test Agreement\",\n    \"status\": \"SIGNED\"\n  },\n  \"participant\": {\n    \"email\": \"{{recipientEmail}}\",\n    \"name\": \"Test User\",\n    \"status\": \"SIGNED\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/api/webhooks/adobe-sign",
            "description": "🧪 **Test Webhook Reception**: Send a simulated Adobe Sign event to test your webhook handling.\n\n✅ **Key Features**:\n• Simulates a document signing event\n• Tests your webhook handler's response\n• No authentication required (Adobe Sign doesn't authenticate)\n\n📋 **Customizable Parameters**:\n• `event`: The type of event (AGREEMENT_ACTION_COMPLETED, AGREEMENT_SIGNED, etc.)\n• `agreement`: Information about the signed document\n• `participant`: Information about the signer\n\n⚠️ **Note**: This endpoint is for testing only. In production, Adobe Sign will call this endpoint automatically when events occur."
          },
          "response": []
        }
      ]
    }
  ]
}
