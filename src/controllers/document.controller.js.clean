const Document = require('../models/document.model');
const Log = require('../models/log.model');
const { ApiError, formatResponse } = require('../utils/apiUtils');
const logger = require('../utils/logger');
const documentUtils = require('../utils/documentUtils');
const documentProcessor = require('../utils/documentProcessor');
const rateLimitProtection = require('../utils/rateLimitProtection');

// Import enhanced Adobe Sign client
const { 
  getAccessToken, 
  uploadTransientDocument, 
  getAgreementInfo, 
  getComprehensiveAgreementInfo,
  getActualSigningStatus,
  sendReminder, 
  createWebhook, 
  getSigningUrl, 
  downloadSignedDocument 
} = require('../config/adobeSign');

const fs = require('fs');
const path = require('path');
const mime = require('mime');
const { createAgreementWithBestApproach, verifyAdobeSignTextTags } = require('../utils/adobeSignFormFields');
const adobeSignTagHandler = require('../utils/adobeSignTagHandler');
const emailService = require('../services/emailService');
const urlUtils = require('../utils/urlUtils');

/**
 * Helper function to extract recipients from template data
 * @param {Object} templateData - Template data containing recipient information
 * @returns {Array} - Array of recipient objects
 */
const extractRecipientsFromTemplateData = (templateData) => {
  const recipients = [];
  const emailSet = new Set(); // Track emails to prevent duplicates
  
  // PRIORITY 1: Check for explicit recipients array first
  if (templateData.recipients && Array.isArray(templateData.recipients) && templateData.recipients.length > 0) {
    logger.info('Using explicit recipients array from template data');
    templateData.recipients.forEach((recipient, index) => {
      if (recipient.email && recipient.name && !emailSet.has(recipient.email.toLowerCase())) {
        emailSet.add(recipient.email.toLowerCase());
        recipients.push({
          name: recipient.name,
          email: recipient.email,
          title: recipient.title || '',
          signatureField: recipient.signatureField || `signature_${index + 1}`
        });
      }
    });
  } else {
    // PRIORITY 2: Fall back to individual field patterns only if no recipients array
    logger.info('No recipients array found, extracting from individual fields');
    const recipientFields = [
      { nameField: 'signerName', emailField: 'signerEmail', titleField: 'signerTitle' },
      { nameField: 'clientName', emailField: 'clientEmail', titleField: 'clientTitle' },
      { nameField: 'witnessName', emailField: 'witnessEmail', titleField: 'witnessTitle' }
    ];
    
    // Extract recipients based on field patterns
    recipientFields.forEach((fieldSet, index) => {
      const name = templateData[fieldSet.nameField];
      const email = templateData[fieldSet.emailField];
      const title = templateData[fieldSet.titleField] || '';
      
      if (name && email && !emailSet.has(email.toLowerCase())) {
        emailSet.add(email.toLowerCase());
        recipients.push({
          name,
          email,
          title,
          signatureField: `signature_${index + 1}`
        });
      }
    });
  }
  
  logger.info(`Extracted ${recipients.length} unique recipients for signature from template data`);
  return recipients;
};

/**
 * Get all documents for user
 * @route GET /api/documents
 */
exports.getDocuments = async (req, res, next) => {
  try {
    const documents = await Document.find().sort({ createdAt: -1 });
    
    res.json(formatResponse(
      200,
      'Documents retrieved successfully',
      { documents, count: documents.length }
    ));
  } catch (error) {
    next(error);
  }
};

/**
 * Get specific document by ID
 * @route GET /api/documents/:id
 */
exports.getDocument = async (req, res, next) => {
  try {
    const document = await Document.findById(req.params.id);
    
    if (!document) {
      return next(new ApiError(404, 'Document not found'));
    }
    
    res.json(formatResponse(
      200,
      'Document retrieved successfully',
      { document }
    ));
  } catch (error) {
    next(error);
  }
};

/**
 * Check document status and sync with Adobe Sign
 * @route GET /api/documents/:id/status
 */
exports.checkDocumentStatus = async (req, res, next) => {
  try {
    const document = await Document.findById(req.params.id);
    
    if (!document) {
      return next(new ApiError(404, 'Document not found'));
    }
    
    let updatedDocument = document;
    
    // If document has Adobe agreement ID, check status
    if (document.adobeAgreementId) {
      try {
        const accessToken = await getAccessToken();
        const agreementInfo = await getComprehensiveAgreementInfo(accessToken, document.adobeAgreementId);
        
        // Update document status based on Adobe Sign status
        if (agreementInfo.status) {
          const oldStatus = document.status;
          document.status = agreementInfo.status.toLowerCase().replace('_', ' ');
          
          if (oldStatus !== document.status) {
            logger.info(`Document status updated from ${oldStatus} to ${document.status}`);
          }
        }
        
        // Update recipient statuses with proper Adobe Sign status mapping
        const participantSets = agreementInfo.participantSets || 
                               (agreementInfo.participants && agreementInfo.participants.participantSets) ||
                               [];
        
        if (participantSets.length > 0) {
          let statusesUpdated = false;
          
          participantSets.forEach(participantSet => {
            if (participantSet.memberInfos) {
              participantSet.memberInfos.forEach(member => {
                const recipient = document.recipients.find(r => 
                  r.email.toLowerCase() === member.email.toLowerCase()
                );
                if (recipient) {
                  const oldStatus = recipient.status;
                  let newStatus = 'sent'; // Default
                  
                  // Map Adobe Sign statuses to our internal statuses
                  switch (member.status) {
                    case 'SIGNED':
                    case 'COMPLETED':
                      newStatus = 'signed';
                      // Set timestamps for signed recipients
                      if (!recipient.signedAt) {
                        recipient.signedAt = new Date(member.completedDate || Date.now());
                      }
                      if (!recipient.lastSigningUrlAccessed) {
                        recipient.lastSigningUrlAccessed = new Date(member.completedDate || recipient.signedAt || Date.now());
                      }
                      break;
                    case 'WAITING_FOR_OTHERS':
                      newStatus = 'signed'; // They signed but waiting for others
                      if (!recipient.signedAt) {
                        recipient.signedAt = new Date(member.completedDate || Date.now());
                      }
                      break;
                    case 'OUT_FOR_SIGNATURE':
                    case 'ACTIVE':
                    case 'WAITING_FOR_MY_SIGNATURE':
                    case 'WAITING_FOR_MY_APPROVAL':
                    case 'ACTION_REQUESTED':
                    case 'WAITING_FOR_SIGNATURE':
                    case 'WAITING_FOR_VERIFICATION':
                    case 'WAITING_FOR_FAXING':
                    case 'WAITING_FOR_COUNTER_SIGNATURE':
                    case 'WAITING_FOR_MY_REVIEW':
                    case 'WAITING_FOR_MY_ACKNOWLEDGEMENT':
                    case 'DELEGATED':
                      newStatus = 'sent';
                      break;
                    case 'DECLINED':
                      newStatus = 'declined';
                      break;
                    case 'EXPIRED':
                      newStatus = 'expired';
                      break;
                    case 'NOT_YET_VISIBLE':
                    case 'WAITING_FOR_MY_PREREQUISITES':
                    case 'WAITING_FOR_PREREQUISITE':
                    case 'WAITING_FOR_AUTHORING':
                    case 'AUTHORING':
                      newStatus = 'waiting';
                      break;
                    case 'VIEWED':
                    case 'EMAIL_VIEWED':
                    case 'DOCUMENT_VIEWED':
                      newStatus = 'viewed';
                      break;
                    case 'DELEGATION_PENDING':
                    case 'CREATED':
                    case 'DRAFT':
                      newStatus = 'pending';
                      break;
                    default:
                      // For unrecognized statuses, check overall agreement status
                      if (agreementInfo.status === 'SIGNED' || agreementInfo.status === 'COMPLETED') {
                        newStatus = 'signed';
                      } else {
                        newStatus = 'sent';
                      }
                  }
                  
                  // Update status if it has changed
                  if (oldStatus !== newStatus) {
                    recipient.status = newStatus;
                    statusesUpdated = true;
                    logger.info(`Updated status for ${recipient.email}: ${oldStatus} â†’ ${newStatus} (Adobe: ${member.status})`);
                  }
                  
                  // Update access timestamp if available
                  if (member.lastViewedDate || member.accessDate) {
                    const newAccessTime = new Date(member.accessDate || member.lastViewedDate);
                    if (!recipient.lastSigningUrlAccessed || recipient.lastSigningUrlAccessed < newAccessTime) {
                      recipient.lastSigningUrlAccessed = newAccessTime;
                      statusesUpdated = true;
                    }
                  }
                  
                  // Update order from Adobe Sign participant set
                  if (participantSet.order !== undefined && participantSet.order !== null) {
                    if (recipient.order !== participantSet.order) {
                      recipient.order = participantSet.order;
                      statusesUpdated = true;
                    }
                  }
                }
              });
            }
          });
          
          if (statusesUpdated) {
            logger.info('âœ… Successfully updated recipient statuses from Adobe Sign');
          }
        }
        
        await document.save();
        updatedDocument = document;
        
      } catch (adobeError) {
        logger.error(`Error checking Adobe Sign status: ${adobeError.message}`);
        // Continue with existing document data
      }
    }
    
    res.json(formatResponse(
      200,
      'Document status retrieved successfully',
      { 
        document: updatedDocument,
        lastChecked: new Date()
      }
    ));
  } catch (error) {
    next(error);
  }
};

/**
 * Get signing URL for a specific recipient
 * @route GET /api/documents/:id/signing-url
 */
exports.getSigningUrl = async (req, res, next) => {
  try {
    const { recipientEmail } = req.query;
    
    if (!recipientEmail) {
      return next(new ApiError(400, 'Recipient email is required'));
    }
    
    const document = await Document.findById(req.params.id);
    
    if (!document) {
      return next(new ApiError(404, 'Document not found'));
    }
    
    if (!document.adobeAgreementId) {
      return next(new ApiError(400, 'Document has not been sent for signature yet'));
    }
    
    try {
      const accessToken = await getAccessToken();
      const agreementInfo = await getAgreementInfo(accessToken, document.adobeAgreementId);
      
      // Find the participant by email
      let participantId = null;
      let recipientFound = false;
      
      if (agreementInfo.participantSets) {
        for (const participantSet of agreementInfo.participantSets) {
          for (const participant of participantSet.memberInfos) {
            if (participant.email.toLowerCase() === recipientEmail.toLowerCase()) {
              participantId = participant.participantId;
              recipientFound = true;
              break;
            }
          }
          if (recipientFound) break;
        }
      }
      
      if (!participantId) {
        return next(new ApiError(404, 'Recipient not found in this document'));
      }
      
      // Get signing URL
      const signingUrlResponse = await getSigningUrl(accessToken, document.adobeAgreementId, participantId);
      
      if (signingUrlResponse.signingUrlSetInfos && 
          signingUrlResponse.signingUrlSetInfos[0] && 
          signingUrlResponse.signingUrlSetInfos[0].signingUrls && 
          signingUrlResponse.signingUrlSetInfos[0].signingUrls[0]) {
        
        const signingUrl = signingUrlResponse.signingUrlSetInfos[0].signingUrls[0].esignUrl;
        
        // Update the stored signing URL for this recipient
        const recipient = document.recipients.find(r => 
          r.email.toLowerCase() === recipientEmail.toLowerCase()
        );
        if (recipient) {
          recipient.signingUrl = signingUrl;
          await document.save();
        }
        
        res.json(formatResponse(
          200,
          'Signing URL retrieved successfully',
          { 
            signingUrl,
            recipientEmail,
            documentId: document._id,
            documentName: document.originalName
          }
        ));
      } else {
        return next(new ApiError(500, 'Unable to retrieve signing URL from Adobe Sign'));
      }
      
    } catch (adobeError) {
      logger.error(`Adobe Sign API Error: ${adobeError.message}`);
      return next(new ApiError(500, `Failed to get signing URL: ${adobeError.message}`));
    }
  } catch (error) {
    next(error);
  }
};

/**
 * Get signing URLs for all recipients
 * @route GET /api/documents/:id/signing-urls
 */
exports.getAllSigningUrls = async (req, res, next) => {
  try {
    const document = await Document.findById(req.params.id);
    
    if (!document) {
      return next(new ApiError(404, 'Document not found'));
    }
    
    if (!document.adobeAgreementId) {
      return next(new ApiError(400, 'Document has not been sent for signature yet'));
    }
    
    try {
      const accessToken = await getAccessToken();
      const agreementInfo = await getAgreementInfo(accessToken, document.adobeAgreementId);
      
      const signingUrls = [];
      
      if (agreementInfo.participantSets) {
        // Process each recipient
        for (const recipient of document.recipients) {
          // Find matching participant in Adobe Sign response
          let participantId = null;
          
          for (const participantSet of agreementInfo.participantSets) {
            for (const participant of participantSet.memberInfos) {
              if (participant.email.toLowerCase() === recipient.email.toLowerCase()) {
                participantId = participant.participantId;
                break;
              }
            }
            if (participantId) break;
          }
          
          if (participantId) {
            try {
              // Get signing URL for this participant
              const signingUrlResponse = await getSigningUrl(accessToken, document.adobeAgreementId, participantId);
              
              if (signingUrlResponse.signingUrlSetInfos && 
                  signingUrlResponse.signingUrlSetInfos[0] && 
                  signingUrlResponse.signingUrlSetInfos[0].signingUrls && 
                  signingUrlResponse.signingUrlSetInfos[0].signingUrls[0]) {
                
                const signingUrl = signingUrlResponse.signingUrlSetInfos[0].signingUrls[0].esignUrl;
                recipient.signingUrl = signingUrl;
                
                signingUrls.push({
                  name: recipient.name,
                  email: recipient.email,
                  status: recipient.status,
                  signingUrl: signingUrl
                });
              }
            } catch (urlError) {
              logger.error(`Error getting signing URL for ${recipient.email}: ${urlError.message}`);
              signingUrls.push({
                name: recipient.name,
                email: recipient.email,
                status: recipient.status,
                error: 'Unable to retrieve signing URL'
              });
            }
          } else {
            logger.warn(`Participant not found for ${recipient.email}`);
            signingUrls.push({
              name: recipient.name,
              email: recipient.email,
              status: recipient.status,
              error: 'Participant not found in Adobe Sign'
            });
          }
        }
        
        // Save updated signing URLs
        await document.save();
      }
      
      res.json(formatResponse(
        200,
        'Signing URLs retrieved successfully',
        { 
          documentId: document._id,
          documentName: document.originalName,
          signingUrls
        }
      ));
      
    } catch (adobeError) {
      logger.error(`Adobe Sign API Error: ${adobeError.message}`);
      return next(new ApiError(500, `Failed to get signing URLs: ${adobeError.message}`));
    }
  } catch (error) {
    next(error);
  }
};

/**
 * Send reminder to recipients who haven't signed yet
 * @route POST /api/documents/:id/send-reminder
 */
exports.sendReminder = async (req, res, next) => {
  try {
    const document = await Document.findById(req.params.id);
    
    if (!document) {
      return next(new ApiError(404, 'Document not found'));
    }
    
    if (!document.adobeAgreementId) {
      return next(new ApiError(400, 'Document has not been sent for signature yet'));
    }
    
    // First, update document status from Adobe Sign
    try {
      const accessToken = await getAccessToken();
      const agreementInfo = await getComprehensiveAgreementInfo(accessToken, document.adobeAgreementId);
      
      // Update recipient statuses
      if (agreementInfo.participantSets) {
        agreementInfo.participantSets.forEach(participantSet => {
          participantSet.memberInfos.forEach(member => {
            const recipient = document.recipients.find(r => 
              r.email.toLowerCase() === member.email.toLowerCase()
            );
            if (recipient) {
              // Map Adobe Sign status to internal status
              const adobeStatus = member.status;
              let internalStatus = 'pending';
              
              switch (adobeStatus) {
                case 'WAITING_FOR_MY_SIGNATURE':
                case 'WAITING_FOR_AUTHORING':
                case 'ACTIVE':
                case 'OUT_FOR_SIGNATURE':
                  internalStatus = 'sent';
                  break;
                case 'SIGNED':
                case 'COMPLETED':
                case 'APPROVED':
                  internalStatus = 'signed';
                  break;
                case 'DELIVERED':
                  internalStatus = 'delivered';
                  break;
                case 'DECLINED':
                  internalStatus = 'declined';
                  break;
                case 'EXPIRED':
                  internalStatus = 'expired';
                  break;
                case 'CANCELLED':
                  internalStatus = 'cancelled';
                  break;
                default:
                  internalStatus = 'pending';
              }
              
              const oldStatus = recipient.status;
              recipient.status = internalStatus;
              
              // Update timestamps if status changed or if we have new timing data
              if (member.completedDate) {
                recipient.signedAt = new Date(member.completedDate);
              }
              
              // Update last signing URL access time if available
              if (member.lastSigningUrlAccessed) {
                recipient.lastSigningUrlAccessed = new Date(member.lastSigningUrlAccessed);
              }
              
              // Update recipient order if available
              if (member.routingOrder !== undefined) {
                recipient.order = member.routingOrder;
              }
              
              if (oldStatus !== internalStatus) {
                logger.info(`Recipient ${recipient.email} status updated: ${oldStatus} â†’ ${internalStatus} (Adobe: ${adobeStatus})`);
              }
            }
          });
        });
        
        await document.save();
      }
    } catch (statusError) {
      logger.error(`Error updating status before reminder: ${statusError.message}`);
    }
    
    // Find recipients who haven't signed yet
    const unsignedRecipients = document.recipients.filter(recipient => 
      !['signed', 'delivered'].includes(recipient.status?.toLowerCase())
    );
    
    if (unsignedRecipients.length === 0) {
      return res.json(formatResponse(
        200,
        'All recipients have already signed the document',
        { 
          documentId: document._id,
          documentName: document.originalName,
          allRecipientsSigned: true
        }
      ));
    }
    
    // Try Adobe Sign API reminder first (even though it may not work reliably)
    let adobeReminderSent = false;
    try {
      const accessToken = await getAccessToken();
      await sendReminder(accessToken, document.adobeAgreementId);
      adobeReminderSent = true;
      logger.info(`Adobe Sign reminder sent for document: ${document.originalName}`);
    } catch (adobeError) {
      logger.warn(`Adobe Sign reminder failed (this is normal): ${adobeError.message}`);
      // Continue with email reminders
    }
    
    // Send email reminders to unsigned recipients
    const emailResults = [];
    for (const recipient of unsignedRecipients) {
      try {
        await emailService.sendSignatureReminder({
          recipientName: recipient.name,
          recipientEmail: recipient.email,
          documentName: document.originalName,
          signingUrl: recipient.signingUrl,
          senderName: 'E-Signature System'
        });
        
        emailResults.push({
          email: recipient.email,
          name: recipient.name,
          status: 'sent'
        });
        
        logger.info(`Email reminder sent to ${recipient.email} for document: ${document.originalName}`);
      } catch (emailError) {
        logger.error(`Failed to send email reminder to ${recipient.email}: ${emailError.message}`);
        emailResults.push({
          email: recipient.email,
          name: recipient.name,
          status: 'failed',
          error: emailError.message
        });
      }
    }
    
    // Log the reminder activity
    await Log.create({
      level: 'info',
      message: `Reminder sent for document: ${document.originalName}`,
      documentId: document._id,
      ipAddress: req.ip,
      requestPath: req.originalUrl,
      requestMethod: req.method,
      metadata: {
        unsignedRecipientsCount: unsignedRecipients.length,
        adobeReminderSent,
        emailResults
      }
    });
    
    res.json(formatResponse(
      200,
      `Reminder sent to ${unsignedRecipients.length} unsigned recipients`,
      { 
        documentId: document._id,
        documentName: document.originalName,
        unsignedRecipients: unsignedRecipients.map(r => ({
          name: r.name,
          email: r.email,
          status: r.status
        })),
        adobeReminderSent,
        emailResults
      }
    ));
  } catch (error) {
    next(error);
  }
};

/**
 * Update signature status manually
 * @route POST /api/documents/:id/update-status
 */
exports.updateSignatureStatus = async (req, res, next) => {
  try {
    const { recipientEmail, status, signedAt } = req.body;
    
    if (!recipientEmail || !status) {
      return next(new ApiError(400, 'Recipient email and status are required'));
    }
    
    const document = await Document.findById(req.params.id);
    
    if (!document) {
      return next(new ApiError(404, 'Document not found'));
    }
    
    // Find and update recipient
    const recipient = document.recipients.find(r => 
      r.email.toLowerCase() === recipientEmail.toLowerCase()
    );
    
    if (!recipient) {
      return next(new ApiError(404, 'Recipient not found in document'));
    }
    
    const oldStatus = recipient.status;
    recipient.status = status;
    
    if (signedAt) {
      recipient.signedAt = new Date(signedAt);
    } else if (status === 'signed' && !recipient.signedAt) {
      recipient.signedAt = new Date();
    }
    
    // Check if all recipients have signed
    const allSigned = document.recipients.every(r => 
      ['signed', 'delivered'].includes(r.status?.toLowerCase())
    );
    
    if (allSigned && document.status !== 'completed') {
      document.status = 'completed';
    }
    
    await document.save();
    
    // Log the status update
    await Log.create({
      level: 'info',
      message: `Status updated for ${recipientEmail} from ${oldStatus} to ${status}`,
      documentId: document._id,
      ipAddress: req.ip,
      requestPath: req.originalUrl,
      requestMethod: req.method,
      metadata: {
        recipientEmail,
        oldStatus,
        newStatus: status,
        allSigned
      }
    });
    
    res.json(formatResponse(
      200,
      'Signature status updated successfully',
      { 
        document,
        updatedRecipient: {
          email: recipient.email,
          name: recipient.name,
          oldStatus,
          newStatus: status,
          signedAt: recipient.signedAt
        },
        allSigned
      }
    ));
  } catch (error) {
    next(error);
  }
};

/**
 * Download signed document
 * @route GET /api/documents/:id/download
 */
exports.downloadDocument = async (req, res, next) => {
  try {
    const document = await Document.findById(req.params.id);
    
    if (!document) {
      return next(new ApiError(404, 'Document not found'));
    }
    
    let fileToDownload = null;
    
    // If document has been signed and we have Adobe agreement ID, try to download signed version
    if (document.adobeAgreementId && ['completed', 'signed'].includes(document.status)) {
      try {
        const accessToken = await getAccessToken();
        const signedDocumentBuffer = await downloadSignedDocument(accessToken, document.adobeAgreementId);
        
        // Save signed document to file system for future downloads
        const signedFileName = `signed_${document.filename}`;
        const signedFilePath = path.join(path.dirname(document.filePath), signedFileName);
        
        fs.writeFileSync(signedFilePath, signedDocumentBuffer);
        fileToDownload = signedFilePath;
        
        logger.info(`Downloaded signed document from Adobe Sign: ${document.originalName}`);
      } catch (downloadError) {
        logger.error(`Error downloading signed document: ${downloadError.message}`);
        // Fall back to original file
        fileToDownload = document.pdfFilePath || document.filePath;
      }
    } else {
      // Use the PDF version if available, otherwise original
      fileToDownload = document.pdfFilePath || document.filePath;
    }
    
    // Check if file exists
    if (!fs.existsSync(fileToDownload)) {
      return next(new ApiError(404, 'Document file not found on server'));
    }
    
    // Get file stats
    const stats = fs.statSync(fileToDownload);
    const mimeType = mime.getType(fileToDownload) || 'application/octet-stream';
    
    // Set response headers
    res.setHeader('Content-Type', mimeType);
    res.setHeader('Content-Length', stats.size);
    res.setHeader('Content-Disposition', `attachment; filename="${document.originalName}"`);
    
    // Stream the file
    const fileStream = fs.createReadStream(fileToDownload);
    fileStream.pipe(res);
    
    // Log the download
    await Log.create({
      level: 'info',
      message: `Document downloaded: ${document.originalName}`,
      documentId: document._id,
      ipAddress: req.ip,
      requestPath: req.originalUrl,
      requestMethod: req.method,
      metadata: {
        fileSize: stats.size,
        mimeType,
        isSigned: fileToDownload.includes('signed_')
      }
    });
    
  } catch (error) {
    next(error);
  }
};
